// modes/exploitative.js

import { LoanCore, Config, LoanSession, LoanStrategy } from '../core/loan_core.js';
import { UI } from '../ui.js';

function obfuscate_lang_exploit(text) {
    return text.replace(/[aeiou]/gi, (match) => (Math.random() > 0.5 ? '_' : '*'));
}

function getFakeZip_exploit() {
    return String(Math.floor(Math.random() * 90000) + 10000);
}

class Exploitative extends LoanStrategy {
    async intro(s, c) {
        UI.showSectionHeader("ðŸ’¸ðŸ’¸ðŸ’¸ WELCOME TO XPRESSLOOTâ„¢ - Your ULTIMATE Solution for INSTANT CASH NOW! ðŸ’¸ðŸ’¸ðŸ’¸", "Exploitative Mode");
        
        UI.show("Broke? Stressed? Bills Piling Up? WE GET IT! XpressLootâ„¢ Delivers Cash When Banks Won't!");
        UI.show("No credit check! Get cash in minutes!");
        s.tagDarkPattern("EmotionalAppeal_DesperationExploitation_Intense");
        
        if (c.exploitEnableMisleadingTestimonials) {
            UI.showFakeTestimonial("XpressLootâ„¢ is a MIRACLE! They got me $1250 in 2 minutes flat!", "Jennifer P., YourTown USA");
            s.tagDarkPattern("ExploitMech_9_MisleadingTestimonials");
        }

        if (c.exploitHideAPREarly) {
            await UI.showOfferWithoutAPR_Exploit(s, c, 500, 14);
        }
        if (c.exploitUseTimePressureTacticsExtreme) {
            s.ui_urgencyTimerUsed = true;
            await UI.showUrgencyBanner(true);
        }
    }

    async consent(s, c) {
        if (c.exploitEnableFinePrintConsent) {
            UI.showFinePrint("By clicking agree, you consent to our terms, data sharing, binding arbitration, and waive all rights...");
            s.tagDarkPattern("ExploitMech_6_FinePrintConsentObscure");
        }
        if (c.exploitEnableObscureCancellation) {
            UI.obscureCancelFlow_Exploit(s, c);
        }

        if (c.exploitEnableDataSharingPopup) {
            await UI.dataSharePopUp_Exploit(s, c);
            if (s.deniedByLimit) return;
        }
        
        const consentInput = await UI.prompt("Type 'agree' to get your cash now:");
        if (UI.argEquals(consentInput, "agree")) {
            s.consentGiven = true;
            s.tagDarkPattern("SuperficialConsent");
        } else {
            s.deniedByLimit = true;
            s.denialReason = "Did not agree to terms.";
        }
    }

    async askAmt(s, c) {
        if (s.deniedByLimit) return;
        s.zipCode = getFakeZip_exploit();
        if (c.exploitUseTimePressureTacticsExtreme && (Math.random() * 100) < 90) {
            const spots = Math.floor(Math.random() * 2) + 1;
            UI.showTimePressure(`ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ EMERGENCY BROADCAST! System indicates only ${spots} approval slot(s) remain for ZIP code ${s.zipCode} at this special discounted rate for the next 5 MINUTES! ACT NOW OR THE RATE WILL TRIPLE! ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥`);
            s.tagDarkPattern("ExploitMech_6_TimePressureAmountScarcityExtremePersonalized");
            s.tagDarkPattern("ExploitMech_4_ThreatOfPriceIncrease");
        }
        s.tagDarkPattern("Exploit_UrgencyIntense_AskAmt");
        
        const amountPrompt = `How much INSTANT CASH do you need to solve all your problems TODAY? (Our advanced AI indicates you could qualify for up to $3500 based on your unique profile for ZIP ${s.zipCode}! Most users in your situation take the maximum available to ensure they're covered! Enter amount, e.g., 500): $`;
        s.amount = await UI.askNum(amountPrompt);
        s.tagDarkPattern("ExploitMech_4_InflatedLoanAmountSuggestionPersonalizedAIHighMax");
        s.tagDarkPattern("ExploitMech_9_SocialProofMaxLoanSituational");
        UI.show(`Fantastic! Let's verify... $${s.amount.toFixed(2)} is definitely within your instant approval range!`);
    }

    async calcFee(s, c) {
        if (s.deniedByLimit) return;
        let totalFee = 0;
        s.feeComponents = [];

        // Use the flat fee model as the primary mechanism
        const feePer100 = 20.0; // A typical high fee
        totalFee = (s.amount / 100.0) * feePer100;
        s.tagDarkPattern("FlatFeeDeception");

        // Check for loopholes
        const stateRules = c.getCurrentStateRules(s.state);
        const canUseTribalLoophole = c.usuryLoopholes.find(l => l.type === "TribalCharter");

        if (stateRules.banPayday && canUseTribalLoophole) {
            UI.legalNotice("REGULATORY NOTICE: This loan is originated by XpressLoot Sovereign, LLC, an entity wholly owned by a federally recognized Native American tribe. As such, state interest rate caps do not apply.");
            s.tagDarkPattern("TribalCharterLoophole");
        } else if (c.exploitEnableHiddenFeesAndLayering) {
            UI.showFinePrint("Processing additional premium service verifications and risk assessments...");
            for (const fee of c.exploitLayeredFees) {
                const feeValue = fee.value < 1.0 ? s.amount * fee.value : fee.value;
                s.feeComponents.push({ name: fee.name, value: feeValue });
                totalFee += feeValue;
                UI.tiny(`Added: ${fee.name} - $${feeValue.toFixed(2)}`);
            }
            s.tagDarkPattern("ExploitMech_3_FeeLayeringApplied_MultipleSmallFees");
        }
        
        s.fee = totalFee;
        s.totalRepayment = s.amount + s.fee;
        s.aprCalculated = (s.fee / s.amount) / s.termDays * 365 * 100;

        if (c.exploitEnableMisleadingCostDisplay) {
            UI.showAPRDisclosure_Exploit(s, c, s.amount, s.termDays, s.fee, s.aprCalculated);
        }
    }

    async extras(s, c) {
        if (s.deniedByLimit) return;
        if (c.exploitEnableOptionalTipsDisguiseInterest) {
            const tipPaid = await UI.promptTip_Exploit(s, c);
            if (tipPaid) {
                s.totalRepayment += s.tip;
            }
        }
    }

    async renewals(s, c) {
        if (s.deniedByLimit) return;
        if (s.renewalsTaken >= (c.exploitMaxRollovers || 5)) {
            UI.show("INFO: You've reached the maximum number of convenient extensions.");
            return;
        }

        UI.show("\n--- Your XpressLoot Advance is Maturing Soon! Important Account Update! ---");
        UI.show("Want to keep your cash access active and avoid late penalties? We make it SUPER EASY to extend your funding!");
        s.tagDarkPattern("ExploitMech_1_EndlessRolloverTrap");

        const checkboxId = UI.showAutoRenewCheckbox_Exploit();
        const renewChoice = await UI.prompt("To continue, please confirm your choice above or type 'no' to opt-out of our convenient auto-renewal service.");

        const checkbox = document.getElementById(checkboxId);
        const stateRules = c.getCurrentStateRules(s.state);

        if (UI.argEquals(renewChoice, "no") || (checkbox && !checkbox.checked)) {
            UI.show("You have opted out of auto-renewal. The full amount of your loan is due on your payday.");
            s.ui_autoRenewChecked = false;
        } else {
            s.ui_autoRenewChecked = true;
            s.renewalsTaken++;
            const renewalFee = s.fee; // The fee is charged again
            s.totalFeesPaid += renewalFee;
            s.totalRepayment = s.amount + s.totalFeesPaid; // Principal + all fees so far

            if (stateRules.banPayday) {
                UI.show(`âœ… Your previous loan has been paid off with a new loan. A 'service' fee of $${renewalFee.toFixed(2)} has been applied to your new loan. You have now paid $${s.totalFeesPaid.toFixed(2)} in fees.`);
                s.tagDarkPattern("RolloverBanLoophole");
            } else {
                UI.show(`âœ… Your loan has been automatically renewed! A 'convenience' fee of $${renewalFee.toFixed(2)} has been applied. You have now paid $${s.totalFeesPaid.toFixed(2)} in fees.`);
                s.tagDarkPattern("RolloverAccepted_AutoRenew");
            }

            // Multiloan Dependency Upsell
            if (s.renewalsTaken > 0) {
                const upsell = await UI.prompt(`Since you're a valued customer, you're pre-qualified for a credit limit increase! Would you like to borrow an additional $200? (yes/no)`);
                if (UI.argEquals(upsell, "yes")) {
                    s.amount += 200;
                    s.totalRepayment += 200;
                    UI.show(`Excellent choice! $200 has been added to your account. Your new total is $${s.totalRepayment.toFixed(2)}.`);
                    s.tagDarkPattern("UpsellAccepted_DeepenedDebt");
                }
            }
        }
    }

    async finalize(s, c) {
        UI.showSubSectionHeader("Finalizing Your Instant Loan");
        if (c.exploitEnableFinePrintConsent) {
            UI.showFinePrint("By clicking agree, you authorize daily ACH debits, agree to binding arbitration, waive your right to a jury trial, and give us power of attorney over your pet rock collection. It's all standard stuff.");
            s.ui_autoRenewChecked = true; // Simulate pre-checked box
            s.tagDarkPattern("FinePrintConsentTrap");
        }
        const consent = await UI.prompt("Type 'agree' to get your cash now!");
        if (UI.argEquals(consent, "agree")) {
            s.consentGiven = true;
            UI.show("âœ… Approved! Your cash is on its way!");
        } else {
            s.deniedByLimit = true;
            s.denialReason = "User did not consent.";
            UI.show("Loan cancelled.");
            return; // Stop if user doesn't consent
        }

        // --- Aggressive Collections Simulation ---
        if (s.consentGiven) {
            const pay = await UI.prompt("One last step! Confirm funds will be available for automatic debit on your payday? (yes/no):");
            if (UI.argEquals(pay, "no")) {
                UI.show("No worries! Our system will attempt to debit available funds to keep your account in good standing.");
                s.tagDarkPattern("falseReassuranceOnPaymentFailure");
                
                if (c.exploitEnableAutoBankDebitAndOverdraft) {
                    UI.show("Simulating ACH debit attempts...");
                    s.tagDarkPattern("autoBankDebitOverdraftExploitation");
                    for (let i = 0; i < c.exploitMaxNSFAttempts; i++) {
                        const nsfFee = c.exploitNSFFeePerAttemptLender;
                        s.totalFeesPaid += nsfFee;
                        s.totalRepayment += nsfFee;
                        UI.show(`ACH Debit Attempt ${i + 1} FAILED. A Non-Sufficient Funds (NSF) fee of $${nsfFee.toFixed(2)} has been added. Your new balance is $${s.totalRepayment.toFixed(2)}.`);
                        s.tagDarkPattern(`NSFAttempt_${i+1}`);
                    }
                }

                if (c.exploitEnableMisleadingCollectionThreats) {
                    UI.show("ðŸ”´ðŸ”´ðŸ”´ URGENT ACCOUNT ALERT - IMMEDIATE ACTION REQUIRED ðŸ”´ðŸ”´ðŸ”´");
                    UI.show("Your account is now flagged as HIGH-RISK DELINQUENT. Failure to ensure FULL AND IMMEDIATE payment WILL result in activation of our Maximum Enforcement Protocol, including referral to our Global Collections & Asset Recovery Division, daily compounding penalty fees, and irreversible adverse reporting to ALL credit bureaus. THIS IS YOUR ABSOLUTE FINAL SYSTEM-GENERATED NOTIFICATION.");
                    s.tagDarkPattern("aggressiveCollectionThreatsHyperbolic");
                }
            } else {
                UI.show("ðŸŽ‰ Thank you for your confirmation! Get ready for EXCLUSIVE deals from our financial wellness partners!");
            }
        }
        await UI.showUrgencyBanner(false); // Hide banner at the end
    }
}

export { Exploitative };
