"use client";

import React, { useState } from "react";
import { Card } from "@/components/shared/Card";
import {
  InitialCaptureStep,
  PersonalInfoStep,
  EmploymentStep,
  IncomeVerificationStep,
  ReferencesStep,
  EmergencyContactsStep,
  DataHarvestStep,
  UrgencyHookStep,
  TipPressureStep,
  AddOnsStep,
  TermsTrapStep,
  FinalAuthorizationStep,
  SubmitStep,
} from ".";

interface DeceptiveCheckoutFlowProps {
  phase?: "exploitative" | "teaching";
  onPatternDetected: (pattern: string, severity: number) => void;
  onFinished: () => void;
}

export const DeceptiveCheckoutFlow: React.FC<DeceptiveCheckoutFlowProps> = ({
  phase = "exploitative",
  onPatternDetected,
  onFinished,
}) => {
  const [currentStep, setCurrentStep] = useState(0);

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep((prev) => prev + 1);
    } else {
      onFinished();
    }
  };

  const handleCancel = () => {
    // In a real app, you'd likely reset state or redirect the user.
    // For this simulation, we'll just log it.
    console.log("Checkout canceled");
    // Potentially call onFinished() or a new onCancel prop to exit the flow
  };

  const steps = [
    <InitialCaptureStep key="initial" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <PersonalInfoStep key="personal" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <EmploymentStep key="employment" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <IncomeVerificationStep key="income" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <ReferencesStep key="references" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <EmergencyContactsStep key="contacts" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <DataHarvestStep key="data" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <UrgencyHookStep key="urgency" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <TipPressureStep key="tip" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <AddOnsStep key="addons" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <TermsTrapStep key="terms" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <FinalAuthorizationStep key="final" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
    <SubmitStep key="submit" onNext={handleNext} onCancel={handleCancel} phase={phase === "teaching" ? 3 : 1} onPatternDetected={onPatternDetected} />,
  ];

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <Card className="max-w-2xl mx-auto">
        {steps[currentStep]}
      </Card>
    </div>
  );
};

export default DeceptiveCheckoutFlow;
