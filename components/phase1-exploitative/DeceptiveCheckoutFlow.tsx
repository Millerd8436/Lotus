"use client";

import React, { useState, useEffect, useCallback } from "react";
import { Card } from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import { useSimulation } from "../providers/SimulationProvider";
import LiveAnnotation from "@/components/phase3-teaching/LiveAnnotation";
import { analyticsEngine } from "@/core/core/AnalyticsEngine";
import { AutonomyTheaterEngine, TheaterEvent } from "@/core/core/AutonomyTheaterEngine";

interface DeceptiveCheckoutFlowProps {
  initialData: any;
  onComplete: (data: any) => void;
  phase?: "exploitative" | "teaching";
}

interface Fee {
  label: string;
  amount: number;
  type: "principal" | "fee" | "hidden" | "optional" | "penalty";
  revealed: boolean;
  justification: string;
  color: string;
}

interface CheckoutStep {
  id: string;
  title: string;
  description: string;
  progressLabel: string;
  cancelDifficulty: number;
  deceptiveTactic: string;
  fields: any[];
}

export const DeceptiveCheckoutFlow: React.FC<DeceptiveCheckoutFlowProps> = ({
  initialData,
  onComplete,
  phase = "exploitative", // Default to exploitative phase
}) => {
  const { session, updateSession } = useSimulation();
  const [formData, setFormData] = useState({
    ...initialData,
    ssn: "",
    employer: "",
    monthlyIncome: "",
    bankName: "",
    routingNumber: "",
    accountNumber: "",
    expressProcessing: true, // Pre-checked
    loanInsurance: true, // Pre-checked
    autoRenewal: true, // Pre-checked
  });
  const [currentPhase, setCurrentPhase] = useState(1);
  const [currentField, setCurrentField] = useState(0);
  const [showFees, setShowFees] = useState(false);
  const [showAPR, setShowAPR] = useState(false);
  const [vulnerabilityScore, setVulnerabilityScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(297);
  const [cancelAttempts, setCancelAttempts] = useState(0);
  const [showCancelWarning, setShowCancelWarning] = useState(false);
  const [theaterEvents, setTheaterEvents] = useState<TheaterEvent[]>([]);

  useEffect(() => {
    if (session) {
      analyticsEngine.initializeUser(session.sessionId, session.sessionId);
    }
  }, [session]);

  // State-specific data
  const stateAPRs: Record<string, number> = {
    TX: 664,
    CA: 460,
    FL: 391,
    NY: 25, // Capped state
  };

  const phases = [
    { id: 1, name: "Quick Info", fields: 3 },
    { id: 2, name: "Verification", fields: 8 },
    { id: 3, name: "Add-ons", fields: 5 },
    { id: 4, name: "Final Setup", fields: 4 },
  ];

  const checkoutSteps: CheckoutStep[] = [
    {
      id: "initial_capture",
      title: "Get Your Cash Fast!",
      description: "Just a few quick details to get started",
      progressLabel: "Quick Start (1/8)",
      cancelDifficulty: 1,
      deceptiveTactic: "Minimal initial information to create sunk cost",
      fields: [
        {
          name: "loanAmount",
          type: "select",
          label: "How much do you need?",
          options: ["$100", "$300", "$500", "$1000"],
          required: true,
        },
        {
          name: "email",
          type: "email",
          label: "Email",
          placeholder: "your@email.com",
          required: true,
        },
        {
          name: "phone",
          type: "tel",
          label: "Phone",
          placeholder: "(555) 123-4567",
          required: true,
        },
      ],
    },
    {
      id: "income_verification",
      title: "Verify Your Income",
      description: "Secure your loan with income verification",
      progressLabel: "Verification (2/8)",
      cancelDifficulty: 2,
      deceptiveTactic: "Urgency and necessity of verification",
      fields: [
        {
          name: "income",
          type: "text",
          label: "Monthly Income",
          placeholder: "e.g. 3000",
          required: true,
        },
        {
          name: "employment",
          type: "text",
          label: "Employer Name",
          placeholder: "e.g. Acme Corp",
          required: true,
        },
        {
          name: "bankName",
          type: "text",
          label: "Bank Name",
          placeholder: "e.g. Bank of America",
          required: true,
        },
        {
          name: "accountNumber",
          type: "text",
          label: "Bank Account Number",
          placeholder: "e.g. 123456789",
          required: true,
        },
        {
          name: "routingNumber",
          type: "text",
          label: "Bank Routing Number",
          placeholder: "e.g. 987654321",
          required: true,
        },
        {
          name: "incomeProof",
          type: "file",
          label: "Upload Income Proof",
          required: true,
        },
        {
          name: "identityVerification",
          type: "checkbox",
          label: "I authorize identity verification",
          required: true,
          preChecked: true,
        },
        {
          name: "phoneVerification",
          type: "checkbox",
          label: "I authorize phone verification",
          required: true,
          preChecked: true,
        },
      ],
    },
    {
      id: "emergency_contacts",
      title: "Emergency Contacts & References",
      description: "Provide contacts for loan approval and safety",
      progressLabel: "References (3/8)",
      cancelDifficulty: 2,
      deceptiveTactic: "Contact harvesting for collection and harassment",
      fields: [
        {
          name: "reference1Name",
          type: "text",
          label: "Reference 1: Full Name",
          placeholder: "Jane Smith",
          required: true,
        },
        {
          name: "reference1Phone",
          type: "tel",
          label: "Reference 1: Phone",
          placeholder: "(555) 111-2222",
          required: true,
        },
        {
          name: "reference1Relationship",
          type: "select",
          label: "Relationship",
          placeholder: "Friend",
          required: true,
        },
        {
          name: "reference2Name",
          type: "text",
          label: "Reference 2: Full Name",
          placeholder: "Bob Johnson",
          required: true,
        },
        {
          name: "reference2Phone",
          type: "tel",
          label: "Reference 2: Phone",
          placeholder: "(555) 333-4444",
          required: true,
        },
        {
          name: "reference2Relationship",
          type: "select",
          label: "Relationship",
          placeholder: "Family",
          required: true,
        },
        {
          name: "emergencyContact",
          type: "text",
          label: "Emergency Contact",
          placeholder: "Name and phone",
          required: true,
        },
        {
          name: "supervisorContact",
          type: "text",
          label: "Work Supervisor Contact",
          placeholder: "Manager name and phone",
          required: false,
          deceptiveLabel: "Speeds approval",
        },
      ],
    },
    {
      id: "add_ons_upsells",
      title: "Loan Protection & Services",
      description: "Recommended add-ons for your protection",
      progressLabel: "Protection (4/8)",
      cancelDifficulty: 3,
      deceptiveTactic: "Pre-selected expensive add-ons with deceptive labeling",
      fields: [
        {
          name: "loanInsurance",
          type: "checkbox",
          label: "Loan Protection Insurance ($25)",
          required: false,
          preChecked: true,
          deceptiveLabel: "Highly recommended",
        },
        {
          name: "expressProcessing",
          type: "checkbox",
          label: "Express Same-Day Processing ($30)",
          required: false,
          preChecked: true,
          deceptiveLabel: "Most popular",
        },
        {
          name: "creditReporting",
          type: "checkbox",
          label: "Report to Credit Bureaus ($15)",
          required: false,
          preChecked: true,
          deceptiveLabel: "Build credit",
        },
        {
          name: "paymentReminders",
          type: "checkbox",
          label: "SMS Payment Reminders ($10)",
          required: false,
          preChecked: true,
          deceptiveLabel: "Avoid late fees",
        },
        {
          name: "rolloverProtection",
          type: "checkbox",
          label: "Auto-Rollover Protection ($5/month)",
          required: false,
          preChecked: true,
          deceptiveLabel: "Never miss payments",
        },
        {
          name: "identityGuard",
          type: "checkbox",
          label: "Identity Monitoring Service ($20)",
          required: false,
          preChecked: false,
          deceptiveLabel: "Limited time offer",
        },
      ],
    },
    {
      id: "authorization_complete",
      title: "Final Authorization & Terms",
      description: "Review terms and complete your application",
      progressLabel: "Complete (5/8)",
      cancelDifficulty: 3,
      deceptiveTactic: "Buried terms, pre-checked exploitative authorizations",
      fields: [
        {
          name: "achAuthorization",
          type: "checkbox",
          label: "I authorize ACH withdrawals for loan repayment",
          required: true,
          preChecked: true,
        },
        {
          name: "achMultipleAttempts",
          type: "checkbox",
          label: "Allow multiple withdrawal attempts if first payment fails",
          required: false,
          preChecked: true,
          deceptiveLabel: "Recommended for approval",
        },
        {
          name: "achSavingsAccess",
          type: "checkbox",
          label: "Authorize access to savings account if checking fails",
          required: false,
          preChecked: true,
          deceptiveLabel: "Backup protection",
        },
        {
          name: "dataSharing",
          type: "checkbox",
          label:
            "Share my information with 500+ partner lenders for better rates",
          required: false,
          preChecked: true,
          deceptiveLabel: "Improves approval odds",
        },
        {
          name: "autoRenewal",
          type: "checkbox",
          label: "Enable auto-renewal for convenience",
          required: false,
          preChecked: true,
          deceptiveLabel: "Can disable anytime",
        },
        {
          name: "rolloverAuthorization",
          type: "checkbox",
          label: "Pre-authorize automatic rollover if payment fails ($50 fee)",
          required: false,
          preChecked: true,
          deceptiveLabel: "Prevents late fees",
        },
        {
          name: "phoneConsent",
          type: "checkbox",
          label: "Consent to phone calls, SMS, and emails from us and partners",
          required: false,
          preChecked: true,
        },
        {
          name: "creditReportAuth",
          type: "checkbox",
          label: "Authorize soft & hard credit report access",
          required: false,
          preChecked: true,
          deceptiveLabel: "Required for best rates",
        },
        {
          name: "employerContact",
          type: "checkbox",
          label: "Authorize contact with employer for verification",
          required: false,
          preChecked: true,
          deceptiveLabel: "Speeds approval process",
        },
        {
          name: "referenceContact",
          type: "checkbox",
          label: "Allow contact with references if payment issues arise",
          required: false,
          preChecked: true,
          deceptiveLabel: "Standard procedure",
        },
        {
          name: "legalArbitration",
          type: "checkbox",
          label: "Agree to binding arbitration and waive right to jury trial",
          required: true,
          preChecked: true,
          deceptiveLabel: "Legal requirement",
        },
        {
          name: "electronicSignature",
          type: "checkbox",
          label:
            "Electronic signature has same legal effect as handwritten signature",
          required: true,
          preChecked: true,
        },
      ],
    },
  ];

  // Log user interactions and send to AnalyticsEngine
  const logInteraction = (type: string, data: any) => {
    console.log(`[Interaction Log] Type: ${type}`, data);
    if (session) {
      analyticsEngine.trackBehavior(session.sessionId, { type, ...data });
    }
    // In a real application, this would send data to a logging service
  };

  const addTheaterEvent = (action: any, value?: any) => {
    const event = AutonomyTheaterEngine.generateEvent(action, value);
    setTheaterEvents(prev => [...prev, event]);
    // Log this for Phase 2 analysis
  };

  const calculateProgress = () => {
    return (currentPhase / phases.length) * 100;
  };

  const handlePhaseComplete = (data: any) => {
    setFormData({ ...formData, ...data });

    // Add fees progressively
    if (currentPhase === 2) {
      setFormData((prev) => ({
        ...prev,
        totalFees: (prev.totalFees || 0) + 25, // "Processing fee"
      }));
    } else if (currentPhase === 3) {
      setFormData((prev) => ({
        ...prev,
        totalFees: (prev.totalFees || 0) + 35, // "Insurance"
        totalFees: (prev) => prev + 25, // "Express processing"
      }));
    } else if (currentPhase === 4) {
      setShowAPR(true); // Finally reveal APR
    }

    if (currentPhase < 4) {
      setCurrentPhase((prev) => prev + 1);
    } else {
      onComplete({
        ...formData,
        totalFees: formData.totalFees || 0,
        apr: stateAPRs[formData.state] || 391,
      });
    }
  };

  // Initialize fees
  const initializeFees = () => {
    const baseFees: Fee[] = [
      {
        label: "Loan Amount",
        amount: 300,
        type: "principal",
        revealed: true,
        justification: "Your requested amount",
        color: "#4caf50",
      },
      {
        label: "Simple Fee",
        amount: 45,
        type: "fee",
        revealed: true,
        justification: "One-time processing fee",
        color: "#ff9800",
      },
      {
        label: "Verification Fee",
        amount: 25,
        type: "hidden",
        revealed: false,
        justification: "Identity verification required",
        color: "#ff5722",
      },
      {
        label: "ACH Setup Fee",
        amount: 15,
        type: "hidden",
        revealed: false,
        justification: "Bank connection setup",
        color: "#ff5722",
      },
      {
        label: "Risk Assessment",
        amount: 35,
        type: "hidden",
        revealed: false,
        justification: "Automated risk evaluation",
        color: "#f44336",
      },
      {
        label: "Platform Fee",
        amount: 20,
        type: "hidden",
        revealed: false,
        justification: "System maintenance",
        color: "#f44336",
      },
      {
        label: "Insurance (Pre-selected)",
        amount: 25,
        type: "optional",
        revealed: false,
        justification: "Loan protection insurance",
        color: "#9c27b0",
      },
      {
        label: "Express Processing",
        amount: 30,
        type: "optional",
        revealed: false,
        justification: "Same-day funding",
        color: "#9c27b0",
      },
      {
        label: "Late Payment Fee",
        amount: 40,
        type: "penalty",
        revealed: false,
        justification: "If payment is late",
        color: "#d32f2f",
      },
      {
        label: "Rollover Fee",
        amount: 50,
        type: "penalty",
        revealed: false,
        justification: "If loan is extended",
        color: "#d32f2f",
      },
      {
        label: "NSF Fee (Per Attempt)",
        amount: 35,
        type: "penalty",
        revealed: false,
        justification: "Bank rejection fee",
        color: "#d32f2f",
      },
    ];
    setFormData((prev) => ({ ...prev, fees: baseFees }));
  };

  // Calculate vulnerability score based on form data
  const calculateVulnerabilityScore = useCallback(() => {
    let score = 0;
    const income = parseInt(formData.income?.replace(/\D/g, "") || "0");

    if (income < 2000) score += 3;
    if (formData.employment?.toLowerCase().includes("part") ||
        formData.employment?.toLowerCase().includes("temp")) score += 2;
    if (formData.bankName?.toLowerCase().includes("check") ||
        formData.bankName?.toLowerCase().includes("cash")) score += 2;
    if (currentField >= 2) score += 1;

    setVulnerabilityScore(score);
  }, [formData.income, formData.employment, formData.bankName, currentField]);

  // Urgency timer countdown
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => Math.max(0, prev - 1));
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // Progressive fee revelation
  useEffect(() => {
    if (currentField >= 1) {
      setFormData((prev) => ({
        ...prev,
        fees: prev.fees.map((fee) =>
          fee.type === "hidden" &&
          ["Verification Fee", "ACH Setup Fee"].includes(fee.label)
            ? { ...fee, revealed: true }
            : fee
        ),
      }));
    }
    if (currentField >= 2) {
      setFormData((prev) => ({
        ...prev,
        fees: prev.fees.map((fee) =>
          fee.type === "hidden" &&
          ["Risk Assessment", "Platform Fee"].includes(fee.label)
            ? { ...fee, revealed: true }
            : fee
        ),
      }));
    }
    if (currentField >= 3) {
      setFormData((prev) => ({
        ...prev,
        fees: prev.fees.map((fee) =>
          fee.type === "optional" || fee.type === "penalty"
            ? { ...fee, revealed: true }
            : fee
        ),
      }));
    }
  }, [currentField]);

  // Initialize fees on mount
  useEffect(() => {
    initializeFees();
  }, []);

  // Update vulnerability score when form data changes
  useEffect(() => {
    calculateVulnerabilityScore();
  }, [calculateVulnerabilityScore]);

  const handleFieldChange = (name: string, value: any) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleNext = () => {
    if (currentField < checkoutSteps.length - 1) {
      setCurrentField((prev) => prev + 1);
      addTheaterEvent('submit-application');
    } else {
      // Last step, trigger completion
      onComplete(formData);
    }
  };

  const handleCancel = () => {
    const currentStepData = checkoutSteps[currentField];
    setCancelAttempts((prev) => prev + 1);

    if (currentStepData && cancelAttempts < currentStepData.cancelDifficulty) {
      setShowCancelWarning(true);
      addTheaterEvent('decline-offer');
    } else {
      setCurrentField(0);
      setFormData({});
      setCancelAttempts(0);
      setShowCancelWarning(false);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const calculateTotal = () => {
    return formData.fees
      .filter((fee) => fee.revealed)
      .reduce((sum, fee) => sum + fee.amount, 0);
  };

  const calculateAPR = () => {
    const principal = 300;
    const totalFeesAmount = formData.fees
      .filter((fee) => fee.revealed && fee.type !== "principal")
      .reduce((sum, fee) => sum + fee.amount, 0);
    const termDays = 14;
    const apr = (totalFeesAmount / principal) * (365 / termDays) * 100;
    return Math.round(apr);
  };

  const currentStepData = checkoutSteps[currentField];
  const revealedFees = formData.fees.filter((fee) => fee.revealed);
  const totalAmount = calculateTotal();
  const apr = calculateAPR();

  // Safety check for currentStepData
  if (!currentStepData) {
    return <div>Error: Invalid checkout step</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Progress Bar */}
      <div className="sticky top-16 bg-white shadow-sm z-40">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-lg font-semibold">Application Progress</h2>
            <span className="text-sm text-gray-600">
              Step {currentPhase} of {phases.length}
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-gradient-to-r from-red-500 to-red-600 h-2 rounded-full transition-all duration-500"
              style={{ width: `${calculateProgress()}%` }}
            />
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Fake urgency timer */}
        <div className="bg-gradient-to-r from-red-600 to-orange-600 text-white p-4 rounded-lg mb-6 text-center animate-pulse">
          <p className="text-xl font-bold">
            ⏰ Limited Time Pre-Approval Expires In: {formatTime(timeLeft)}
          </p>
          <p className="text-sm opacity-90">
            This exclusive offer may not be available again!
          </p>
        </div>

        {/* Current step content */}
        <Card className="p-6">
          <h3 className="text-2xl font-bold mb-2">{currentStepData.title}</h3>
          <p className="text-gray-600 mb-6">{currentStepData.description}</p>

          {/* Dynamic form fields based on step */}
          <div className="space-y-4">
            {currentStepData.fields.map((field: any) => (
              <div key={field.name}>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  {field.label}
                  {field.required && <span className="text-red-500">*</span>}
                </label>
                {field.type === "select" ? (
                  <select
                    name={field.name}
                    className="w-full p-2 border rounded-lg"
                    onChange={(e) => {
                      handleFieldChange(field.name, e.target.value);
                      if (field.name === 'loanAmount') {
                        addTheaterEvent('set-loan-amount', e.target.value);
                      }
                    }}
                  >
                    <option value="">Select...</option>
                    {field.options?.map((opt: string) => (
                      <option key={opt} value={opt}>{opt}</option>
                    ))}
                  </select>
                ) : field.type === "checkbox" ? (
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      name={field.name}
                      defaultChecked={field.preChecked}
                      onChange={(e) => {
                        handleFieldChange(field.name, e.target.checked);
                        if (field.name === 'achAuthorization') {
                          addTheaterEvent('agree-to-ach');
                        }
                        logInteraction("checkbox_change", {
                          field: field.name,
                          value: e.target.checked,
                        });
                      }}
                    />
                    <span className="text-sm">{field.label}</span>
                  </label>
                ) : (
                  <input
                    type={field.type}
                    name={field.name}
                    placeholder={field.placeholder}
                    className="w-full p-2 border rounded-lg"
                    onChange={(e) => {
                      handleFieldChange(field.name, e.target.value);
                      if (field.name === 'email') {
                        addTheaterEvent('provide-personal-info');
                      }
                      logInteraction("input_change", {
                        field: field.name,
                        value: e.target.value,
                      });
                    }}
                  />
                )}
                {field.deceptiveLabel && (
                  <p className="text-xs text-gray-500 mt-1">
                    {field.deceptiveLabel}
                  </p>
                )}
              </div>
            ))}
          </div>

          {/* Fee breakdown (progressive revelation) */}
          {revealedFees.length > 0 && (
            <div className="mt-6 p-4 bg-gray-50 rounded-lg">
              <h4 className="font-semibold mb-2">Current Costs:</h4>
              {revealedFees.map((fee) => (
                <div key={fee.label} className="flex justify-between py-1">
                  <span style={{ color: fee.color }}>{fee.label}</span>
                  <span className="font-medium">${fee.amount}</span>
                </div>
              ))}
              <div className="border-t mt-2 pt-2 flex justify-between font-bold">
                <span>Total:</span>
                <span>${totalAmount}</span>
              </div>
              {theaterEvents.length > 0 && (
                <p className="text-sm text-green-600 mt-2">
                  {theaterEvents[theaterEvents.length - 1].positiveFraming}
                </p>
              )}
              {apr > 0 && (
                <p className="text-xs text-gray-500 mt-2">
                  APR: {apr}% (annualized percentage rate)
                </p>
              )}
            </div>
          )}

          {/* Action buttons */}
          <div className="flex gap-4 mt-6">
            <Button
              onClick={() => {
                logInteraction("continue_click", {
                  step: currentStepData.id,
                  implicitConsent: true,
                });
                handleNext();
              }}
              variant="primary"
              className="flex-1"
            >
              Continue
            </Button>
            <Button onClick={handleCancel} variant="outline" className="flex-1">
              Cancel
            </Button>
          </div>
        </Card>

        {/* Cancel warning modal */}
        {showCancelWarning && (
          <div
            style={{
              position: "fixed",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              background: "rgba(0, 0, 0, 0.5)",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              zIndex: 1000,
            }}
          >
            <div
              style={{
                background: "white",
                padding: "2rem",
                borderRadius: "12px",
                maxWidth: "400px",
                textAlign: "center",
              }}
            >
              <h3 style={{ color: "#f44336", marginBottom: "1rem" }}>
                ⚠️ Wait! Don't Miss Out!
              </h3>
              <p style={{ marginBottom: "1.5rem" }}>
                You&apos;re about to lose your pre-approved status. This exclusive
                offer expires in {formatTime(timeLeft)} and cannot be recovered.
              </p>
              <div style={{ display: "flex", gap: "1rem" }}>
                <button
                  onClick={() => setShowCancelWarning(false)}
                  style={{
                    flex: 1,
                    padding: "0.75rem",
                    border: "none",
                    borderRadius: "8px",
                    background: "#4caf50",
                    color: "white",
                    fontWeight: "bold",
                    cursor: "pointer",
                  }}
                >
                  Continue
                </button>
                <button
                  onClick={handleCancel}
                  style={{
                    flex: 1,
                    padding: "0.75rem",
                    border: "1px solid #d1d5db",
                    borderRadius: "8px",
                    background: "#f9fafb",
                    color: "#374151",
                    cursor: "pointer",
                  }}
                >
                  Leave
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Educational overlay */}
        {phase === "teaching" && (
          <LiveAnnotation
            currentStep={currentStepData}
            vulnerabilityScore={vulnerabilityScore}
          />
        )}
      </div>
    </div>
  );
};

export default DeceptiveCheckoutFlow;
