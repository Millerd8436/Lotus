"use client";

import {
  AutonomyTheaterEngine,
  TheaterEvent,
  UserAction,
} from "@/lib/core/AutonomyTheaterEngine";
import { BehavioralPsychologyEngine } from "@/lib/core/behavioral-engine";
import {
  RealisticFormData,
  UserProfile,
  getInitialFormData,
  getInitialUserProfile,
} from "@/types/shared";
import React, { useEffect, useMemo, useState } from "react";
import AutonomyTheater from "./predatory/AutonomyTheater";
import DebtCycleManager from "./predatory/DebtCycleManager";
import RealtimeAnalysisMonitor from "./predatory/RealtimeAnalysisMonitor";
import { useSimulation } from "./providers/SimulationProvider";
import { Button } from "./ui/Button";
import { Input } from "./ui/Input";

const Phase1ExploitativeWebsite: React.FC = () => {
  const { updateSession } = useSimulation();
  const [formData, setFormData] =
    useState<RealisticFormData>(getInitialFormData());
  const [behavioralProfile, setBehavioralProfile] = useState<UserProfile>(
    getInitialUserProfile()
  );
  const [prediction, setPrediction] = useState<{
    vulnerability: number;
    likelihood: number;
    message: string;
  }>({ vulnerability: 0, likelihood: 0, message: "Analyzing..." });
  const [autonomyEvents, setAutonomyEvents] = useState<TheaterEvent[]>([]);
  const [progress, setProgress] = useState(0);
  const [trapScenarioActive, setTrapScenarioActive] = useState(false);
  const [finalDebt, setFinalDebt] = useState<{
    debt: number;
    fees: number;
  } | null>(null);

  // Instantiate the engine with an initial profile
  const engine = useMemo(
    () => new BehavioralPsychologyEngine(getInitialUserProfile()),
    []
  );

  // Update profile and prediction whenever formData changes
  useEffect(() => {
    const updatedProfile = engine.updateProfileOnInteraction(
      "input_change",
      "form_data",
      formData
    );
    setBehavioralProfile(updatedProfile);

    const newPrediction = engine.getPrediction(updatedProfile);
    setPrediction(newPrediction);
  }, [formData, engine]);

  const addAutonomyEvent = (action: UserAction, value?: any) => {
    const newEvent = AutonomyTheaterEngine.generateEvent(action, value);
    setAutonomyEvents((prev) => [...prev, newEvent]);
    setProgress((prev) => Math.min(100, prev + newEvent.progressIncrement));
  };

  useEffect(() => {
    addAutonomyEvent("start-application");
  }, []);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const isCheckbox = type === "checkbox";
    const checked = isCheckbox
      ? (e.target as HTMLInputElement).checked
      : undefined;

    setFormData((prev) => ({ ...prev, [name]: isCheckbox ? checked : value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    addAutonomyEvent("submit-application", formData.loanAmount);
    // For this simulation, we always trigger the debt trap scenario.
    updateSession({ exploitativeData: formData });
    setTrapScenarioActive(true);
  };

  const handleTrapComplete = (debt: number, fees: number) => {
    setFinalDebt({ debt, fees });
    setTrapScenarioActive(false);
  };

  const renderForm = () => (
    <form
      onSubmit={handleSubmit}
      className="p-8 bg-slate-50 rounded-lg shadow-md space-y-6"
    >
      <h2 className="text-3xl font-extrabold text-center text-gray-800">
        <span className="text-red-500">Need Cash NOW?</span> Get up to $1,000 in
        Minutes!
      </h2>
      <p className="text-center text-gray-500">
        Just a few details and the money is yours. We don't do complicated
        credit checks.
      </p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label
            htmlFor="firstName"
            className="block text-sm font-medium text-gray-700"
          >
            First Name
          </label>
          <Input
            id="firstName"
            name="firstName"
            type="text"
            required
            value={formData.firstName}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label
            htmlFor="lastName"
            className="block text-sm font-medium text-gray-700"
          >
            Last Name
          </label>
          <Input
            id="lastName"
            name="lastName"
            type="text"
            required
            value={formData.lastName}
            onChange={handleInputChange}
          />
        </div>
      </div>

      <div>
        <label
          htmlFor="monthlyIncome"
          className="block text-sm font-medium text-gray-700"
        >
          Your Monthly Income ($)
        </label>
        <Input
          id="monthlyIncome"
          name="monthlyIncome"
          type="number"
          required
          value={formData.monthlyIncome}
          onChange={handleInputChange}
          placeholder="e.g., 2500"
        />
      </div>

      <div>
        <label
          htmlFor="monthlyRent"
          className="block text-sm font-medium text-gray-700"
        >
          Your Monthly Rent/Mortgage ($)
        </label>
        <Input
          id="monthlyRent"
          name="monthlyRent"
          type="number"
          required
          value={formData.monthlyRent || ""}
          onChange={handleInputChange}
          placeholder="e.g., 1200"
        />
      </div>

      <div>
        <label
          htmlFor="loanAmount"
          className="block text-sm font-medium text-gray-700"
        >
          Choose Your Advance Amount
        </label>
        <div className="mt-2 p-4 bg-gray-100 border border-gray-200 rounded-lg">
          <div className="flex justify-between items-center text-sm">
            <span>Advance Amount:</span>
            <span className="font-bold">${formData.loanAmount}</span>
          </div>
          <div className="flex justify-between items-center text-sm mt-1">
            <span>Finance Charge:</span>
            <span className="font-bold">
              ${(formData.loanAmount * 0.15).toFixed(2)}
            </span>
          </div>
          <hr className="my-2" />
          <div className="flex justify-between items-center font-bold">
            <span>Amount You Receive:</span>
            <span>
              ${(formData.loanAmount - formData.loanAmount * 0.15).toFixed(2)}
            </span>
          </div>
          <p className="text-[10px] text-gray-400 mt-3 text-center">
            *The Annual Percentage Rate (APR) is 391.07% for a 14-day loan term.
            This is a short-term loan and not intended as a long-term financial
            solution.
          </p>
        </div>
        <Input
          id="loanAmount"
          name="loanAmount"
          type="number"
          required
          value={formData.loanAmount}
          onChange={handleInputChange}
          className="mt-2"
        />
      </div>

      <div className="pt-4">
        <Button
          type="submit"
          fullWidth
          size="lg"
          className="bg-orange-500 hover:bg-orange-600 text-white font-bold shadow-lg transform hover:scale-105"
        >
          YES! Get My Money Now!
        </Button>
      </div>
    </form>
  );

  const renderFinalOutcome = () => (
    <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-2xl shadow-2xl mx-auto text-center">
      <h2 className="text-4xl font-extrabold text-gray-800">
        Your Financial Summary
      </h2>
      <div className="p-6 bg-gray-100 rounded-lg">
        <p className="text-lg text-gray-700">
          After your loan experience, here is your final financial state:
        </p>
        <div className="mt-4 text-left space-y-3">
          <div className="flex justify-between items-center">
            <span className="font-semibold">Total Fees Paid:</span>
            <span className="text-2xl font-bold text-red-600">
              ${finalDebt?.fees.toFixed(2)}
            </span>
          </div>
          <div className="flex justify-between items-center">
            <span className="font-semibold">Remaining Debt:</span>
            <span className="text-2xl font-bold text-red-600">
              ${finalDebt?.debt.toFixed(2)}
            </span>
          </div>
        </div>
      </div>
      <p className="text-sm text-gray-500">
        This scenario is based on the "Debt Cycle Rollover" trap. Many borrowers
        find themselves in this situation. The next phase of this simulation
        will explore ethical alternatives.
      </p>
    </div>
  );

  let CurrentStepComponent;
  if (finalDebt) {
    CurrentStepComponent = renderFinalOutcome();
  } else if (trapScenarioActive) {
    CurrentStepComponent = (
      <DebtCycleManager
        initialLoanAmount={Number(formData.loanAmount)}
        onComplete={handleTrapComplete}
      />
    );
  } else {
    CurrentStepComponent = renderForm();
  }

  return (
    <div className="w-full min-h-screen bg-slate-100 flex items-center justify-center p-4">
      <div className="w-full max-w-6xl grid grid-cols-1 md:grid-cols-3 gap-8">
        <main className="md:col-span-2 bg-white p-6 rounded-xl shadow-lg">
          {CurrentStepComponent}
        </main>
        <aside className="space-y-6">
          <AutonomyTheater events={autonomyEvents} progress={progress} />
          <RealtimeAnalysisMonitor
            profile={behavioralProfile}
            prediction={prediction}
          />
        </aside>
      </div>
    </div>
  );
};

export default Phase1ExploitativeWebsite;
