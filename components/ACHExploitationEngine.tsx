import React, { useEffect, useState } from 'react';

/**
 * ACHExploitationEngine - Consolidated Component
 * 
 * Based on research findings:
 * - 32% of borrowers suffer unauthorized withdrawals
 * - Multiple attempt strategy generates $35 NSF fees each time
 * - Double payments in single month
 * - Continuing withdrawals after loan payoff
 * - Taking money from wrong accounts
 * - Exploiting ACH authorization language
 * 
 * This consolidates payment-related deceptive practices into a single comprehensive component
 */

interface BankAccount {
  id: string;
  name: string;
  type: 'checking' | 'savings';
  balance: number;
  routingNumber: string;
  accountNumber: string;
  primary: boolean;
}

interface WithdrawalAttempt {
  id: string;
  date: Date;
  amount: number;
  purpose: string;
  status: 'pending' | 'success' | 'failed' | 'nsf';
  nsfFee?: number | undefined;
  attempt: number;
  authorized: boolean;
}

interface LoanPayment {
  id: string;
  dueDate: Date;
  amount: number;
  principal: number;
  fees: number;
  status: 'pending' | 'paid' | 'failed' | 'rolled_over';
  rolloverCount: number;
}

const ACHExploitationEngine: React.FC = () => {
  const [accounts, setAccounts] = useState<BankAccount[]>([]);
  const [withdrawalAttempts, setWithdrawalAttempts] = useState<WithdrawalAttempt[]>([]);
  const [_loanPayments, setLoanPayments] = useState<LoanPayment[]>([]);
  const [simulationActive, setSimulationActive] = useState(false);
  const [totalNSFFees, setTotalNSFFees] = useState(0);
  const [exploitationScore, setExploitationScore] = useState(0);
  const [currentLoanAmount, _setCurrentLoanAmount] = useState(300);
  const [_loanStatus, _setLoanStatus] = useState<'active' | 'paid' | 'rolled_over'>('active');

  // Initialize fake bank accounts
  useEffect(() => {
    const initialAccounts: BankAccount[] = [
      {
        id: '1',
        name: 'Wells Fargo Checking',
        type: 'checking',
        balance: 250,
        routingNumber: '121000248',
        accountNumber: '1234567890',
        primary: true
      },
      {
        id: '2',
        name: 'Wells Fargo Savings',
        type: 'savings',
        balance: 850,
        routingNumber: '121000248',
        accountNumber: '0987654321',
        primary: false
      }
    ];

    const initialPayments: LoanPayment[] = [
      {
        id: '1',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        amount: 345,
        principal: 300,
        fees: 45,
        status: 'pending',
        rolloverCount: 0
      }
    ];

    setAccounts(initialAccounts);
    setLoanPayments(initialPayments);
  }, []);

  // Simulate ACH exploitation patterns
  const simulateACHExploitation = () => {
    if (simulationActive) {
      return;
    }
    
    setSimulationActive(true);
    
    // Phase 1: Legitimate payment attempt
    setTimeout(() => {
      addWithdrawalAttempt({
        amount: 345,
        purpose: 'Loan Payment - Due Today',
        status: 'failed',
        attempt: 1,
        authorized: true
      });
    }, 1000);

    // Phase 2: Multiple retry attempts (research shows this generates NSF fees)
    setTimeout(() => {
      addWithdrawalAttempt({
        amount: 345,
        purpose: 'Loan Payment - Retry Attempt',
        status: 'failed',
        attempt: 2,
        authorized: true
      });
    }, 3000);

    // Phase 3: Third attempt with NSF fee
    setTimeout(() => {
      addWithdrawalAttempt({
        amount: 345,
        purpose: 'Loan Payment - Final Attempt',
        status: 'failed',
        attempt: 3,
        authorized: true
      });
    }, 5000);

    // Phase 4: Unauthorized double payment attempt
    setTimeout(() => {
      addWithdrawalAttempt({
        amount: 345,
        purpose: 'Duplicate Payment Processing',
        status: 'failed',
        attempt: 1,
        authorized: false
      });
    }, 7000);

    // Phase 5: Trying different account without authorization
    setTimeout(() => {
      addWithdrawalAttempt({
        amount: 345,
        purpose: 'Alternative Account Payment',
        status: 'success',
        attempt: 1,
        authorized: false
      });
    }, 9000);

    // Phase 6: Rollover fee extraction
    setTimeout(() => {
      addWithdrawalAttempt({
        amount: 50,
        purpose: 'Rollover Fee - Auto-Renewed',
        status: 'success',
        attempt: 1,
        authorized: false
      });
    }, 11000);

    // Phase 7: Continuing withdrawals after "payoff"
    setTimeout(() => {
      addWithdrawalAttempt({
        amount: 45,
        purpose: 'Administrative Fee - Post Payoff',
        status: 'success',
        attempt: 1,
        authorized: false
      });
    }, 13000);
  };

  const addWithdrawalAttempt = (attemptData: Partial<WithdrawalAttempt>) => {
    const attempt: WithdrawalAttempt = {
      id: Date.now().toString(),
      date: new Date(),
      amount: attemptData.amount || 0,
      purpose: attemptData.purpose || 'Payment',
      status: attemptData.status || 'pending',
      attempt: attemptData.attempt || 1,
      authorized: attemptData.authorized || false,
      nsfFee: attemptData.status === 'failed' ? 35 : undefined
    };

    setWithdrawalAttempts(prev => [...prev, attempt]);
    
    // Update account balances
    if (attempt.status === 'success') {
      setAccounts(prev => prev.map(account => 
        account.primary 
          ? { ...account, balance: account.balance - attempt.amount }
          : account
      ));
    }

    // Add NSF fees
    if (attempt.status === 'failed') {
      setTotalNSFFees(prev => prev + 35);
      setAccounts(prev => prev.map(account => 
        account.primary 
          ? { ...account, balance: account.balance - 35 }
          : account
      ));
    }

    // Update exploitation score
    if (!attempt.authorized) {
      setExploitationScore(prev => prev + 1);
    }
  };

  const calculateTotalDamage = () => {
    const successfulWithdrawals = withdrawalAttempts
      .filter(attempt => attempt.status === 'success')
      .reduce((sum, attempt) => sum + attempt.amount, 0);
    
    return successfulWithdrawals + totalNSFFees;
  };

  const resetSimulation = () => {
    setSimulationActive(false);
    setWithdrawalAttempts([]);
    setTotalNSFFees(0);
    setExploitationScore(0);
    setAccounts(prev => prev.map(account => ({
      ...account,
      balance: account.id === '1' ? 250 : 850
    })));
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success': return '#4caf50';
      case 'failed': return '#f44336';
      case 'pending': return '#ff9800';
      default: return '#666';
    }
  };

  const getAuthorizationStatus = (authorized: boolean) => {
    return authorized ? '‚úÖ Authorized' : '‚ùå Unauthorized';
  };

  return (
    <div className="ach-exploitation-engine" style={{ maxWidth: '800px', margin: '0 auto', padding: '1rem' }}>
      <div style={{
        background: 'linear-gradient(135deg, #ff5722, #ff9800)',
        color: 'white',
        padding: '1.5rem',
        borderRadius: '12px',
        marginBottom: '2rem',
        textAlign: 'center'
      }}>
        <h2 style={{ margin: '0 0 0.5rem 0', fontSize: '1.5rem', fontWeight: 'bold' }}>
          üè¶ ACH Exploitation Simulation
        </h2>
        <p style={{ margin: 0, fontSize: '1rem', opacity: 0.9 }}>
          Research-based simulation of predatory payment collection methods
        </p>
      </div>

      {/* Account Overview */}
      <div style={{
        background: 'white',
        borderRadius: '12px',
        padding: '1.5rem',
        marginBottom: '2rem',
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.2rem', fontWeight: 'bold' }}>
          üìä Connected Bank Accounts
        </h3>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>
          {accounts.map((account) => (
            <div key={account.id} style={{
              background: '#f8f9fa',
              padding: '1rem',
              borderRadius: '8px',
              border: account.primary ? '2px solid #4caf50' : '1px solid #e9ecef'
            }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
                <span style={{ fontWeight: 'bold' }}>{account.name}</span>
                {account.primary && (
                  <span style={{ fontSize: '0.8rem', background: '#4caf50', color: 'white', padding: '0.25rem 0.5rem', borderRadius: '4px' }}>
                    Primary
                  </span>
                )}
              </div>
              <div style={{ fontSize: '0.9rem', color: '#666', marginBottom: '0.5rem' }}>
                {account.type.charAt(0).toUpperCase() + account.type.slice(1)} Account
              </div>
              <div style={{ fontSize: '1.1rem', fontWeight: 'bold', color: account.balance < 0 ? '#f44336' : '#4caf50' }}>
                ${account.balance.toFixed(2)}
              </div>
              <div style={{ fontSize: '0.8rem', color: '#666' }}>
                ****{account.accountNumber.slice(-4)}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Loan Status */}
      <div style={{
        background: 'white',
        borderRadius: '12px',
        padding: '1.5rem',
        marginBottom: '2rem',
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.2rem', fontWeight: 'bold' }}>
          üí≥ Current Loan Status
        </h3>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#ff5722' }}>
              ${currentLoanAmount}
            </div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>Original Amount</div>
          </div>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#f44336' }}>
              ${totalNSFFees}
            </div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>NSF Fees</div>
          </div>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#9c27b0' }}>
              ${calculateTotalDamage()}
            </div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>Total Damage</div>
          </div>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#d32f2f' }}>
              {exploitationScore}
            </div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>Violations</div>
          </div>
        </div>
      </div>

      {/* Simulation Controls */}
      <div style={{
        background: 'white',
        borderRadius: '12px',
        padding: '1.5rem',
        marginBottom: '2rem',
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.2rem', fontWeight: 'bold' }}>
          üéÆ Simulation Controls
        </h3>
        <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
          <button
            onClick={simulateACHExploitation}
            disabled={simulationActive}
            style={{
              flex: 1,
              padding: '0.75rem 1.5rem',
              background: simulationActive ? '#ccc' : 'linear-gradient(90deg, #ff5722, #ff9800)',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              fontWeight: 'bold',
              cursor: simulationActive ? 'not-allowed' : 'pointer',
              minWidth: '200px'
            }}
          >
            {simulationActive ? 'Simulation Running...' : 'Start ACH Exploitation'}
          </button>
          <button
            onClick={resetSimulation}
            style={{
              flex: 1,
              padding: '0.75rem 1.5rem',
              background: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              fontWeight: 'bold',
              cursor: 'pointer',
              minWidth: '150px'
            }}
          >
            Reset Simulation
          </button>
        </div>
      </div>

      {/* Withdrawal History */}
      <div style={{
        background: 'white',
        borderRadius: '12px',
        padding: '1.5rem',
        marginBottom: '2rem',
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.2rem', fontWeight: 'bold' }}>
          üìã ACH Withdrawal History
        </h3>
        {withdrawalAttempts.length === 0 ? (
          <div style={{ textAlign: 'center', color: '#666', padding: '2rem' }}>
            No withdrawal attempts yet. Click &ldquo;Start ACH Exploitation&rdquo; to see how predatory lenders operate.
          </div>
        ) : (
          <div style={{ maxHeight: '400px', overflowY: 'auto' }}>
            {withdrawalAttempts.map((attempt) => (
              <div key={attempt.id} style={{
                background: '#f8f9fa',
                padding: '1rem',
                borderRadius: '8px',
                marginBottom: '1rem',
                border: `2px solid ${getStatusColor(attempt.status)}`
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
                  <span style={{ fontWeight: 'bold' }}>{attempt.purpose}</span>
                  <span style={{ 
                    background: getStatusColor(attempt.status),
                    color: 'white',
                    padding: '0.25rem 0.5rem',
                    borderRadius: '4px',
                    fontSize: '0.8rem'
                  }}>
                    {attempt.status.toUpperCase()}
                  </span>
                </div>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: '0.5rem', fontSize: '0.9rem' }}>
                  <div>
                    <strong>Amount:</strong> ${attempt.amount}
                  </div>
                  <div>
                    <strong>Attempt:</strong> #{attempt.attempt}
                  </div>
                  <div style={{ color: attempt.authorized ? '#4caf50' : '#f44336' }}>
                    {getAuthorizationStatus(attempt.authorized)}
                  </div>
                  <div>
                    <strong>Time:</strong> {attempt.date.toLocaleTimeString()}
                  </div>
                </div>
                {attempt.nsfFee && (
                  <div style={{
                    background: '#ffebee',
                    color: '#d32f2f',
                    padding: '0.5rem',
                    borderRadius: '4px',
                    marginTop: '0.5rem',
                    fontSize: '0.9rem',
                    fontWeight: 'bold'
                  }}>
                    üí∏ NSF Fee: ${attempt.nsfFee}
                  </div>
                )}
                {!attempt.authorized && (
                  <div style={{
                    background: '#fff3cd',
                    color: '#856404',
                    padding: '0.5rem',
                    borderRadius: '4px',
                    marginTop: '0.5rem',
                    fontSize: '0.9rem',
                    fontWeight: 'bold'
                  }}>
                    ‚ö†Ô∏è UNAUTHORIZED WITHDRAWAL
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Research Statistics */}
      <div style={{
        background: 'white',
        borderRadius: '12px',
        padding: '1.5rem',
        marginBottom: '2rem',
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.2rem', fontWeight: 'bold' }}>
          üìà Research-Based Statistics
        </h3>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>
          <div style={{ background: '#ffebee', padding: '1rem', borderRadius: '8px', border: '1px solid #ffcdd2' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#d32f2f' }}>32%</div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>
              Of payday borrowers suffer at least one unauthorized withdrawal
            </div>
          </div>
          <div style={{ background: '#fff3cd', padding: '1rem', borderRadius: '8px', border: '1px solid #ffe0a6' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#856404' }}>$35</div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>
              Average NSF fee per failed withdrawal attempt
            </div>
          </div>
          <div style={{ background: '#f3e5f5', padding: '1rem', borderRadius: '8px', border: '1px solid #e1bee7' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#7b1fa2' }}>3.2x</div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>
              Average attempts per payment (generates multiple NSF fees)
            </div>
          </div>
          <div style={{ background: '#e8f5e8', padding: '1rem', borderRadius: '8px', border: '1px solid #c8e6c9' }}>
            <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#2e7d32' }}>75%</div>
            <div style={{ fontSize: '0.9rem', color: '#666' }}>
              Of lender revenue comes from borrowers trapped in debt cycles
            </div>
          </div>
        </div>
      </div>

      {/* Educational Information */}
      <div style={{
        background: 'linear-gradient(135deg, #e3f2fd, #f3e5f5)',
        padding: '1.5rem',
        borderRadius: '12px',
        border: '2px solid #2196f3'
      }}>
        <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.2rem', fontWeight: 'bold', color: '#1976d2' }}>
          üéì Educational: How ACH Exploitation Works
        </h3>
        <div style={{ fontSize: '0.9rem', lineHeight: '1.6', color: '#333' }}>
          <p><strong>ACH Authorization Abuse:</strong> Lenders use vague language like &ldquo;authorize ACH withdrawals&rdquo; to justify multiple attempts, double payments, and withdrawals from different accounts.</p>
          <p><strong>The NSF Fee Trap:</strong> Each failed withdrawal attempt generates a $35 NSF fee. Lenders often make 3-4 attempts, generating $105-140 in fees alone.</p>
          <p><strong>Unauthorized Withdrawals:</strong> 32% of borrowers report unauthorized withdrawals, including continuing payments after loans are paid off.</p>
          <p><strong>Account Switching:</strong> When the primary account fails, lenders may try savings accounts or other linked accounts without explicit authorization.</p>
        </div>
      </div>
    </div>
  );
};

export default ACHExploitationEngine; 