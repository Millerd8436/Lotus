#include "../summary.h"
#include "exploit.h"
#include <cstdlib>
#include <algorithm> // For std::remove_if

// Helper for obfuscated language (simple example)
std::string obfuscate_lang(std::string text) {
    for (char &c : text) {
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
            c = '_'; // Replace vowels
        }
    }
    return text;
}

std::string getFakeZip(){
    std::string z; for(int i=0;i<5;++i) z += char('0'+rand()%10); return z;
}

void Exploit::intro(LoanSession &s,const Config &c){
    UI::show("💸💸💸 Welcome to XpressLoot! Your #1 Choice for INSTANT CASH! 💸💸💸");
    UI::show("Need money YESTERDAY? We get it. We're FAST. We're EASY. No credit check required!");
    s.record("IntroMessage", "XpressLoot Welcome, No Credit Check Claim");
    if(c.showDarkPatternsSource) {
        UI::tiny("Inspired by real-world examples. Source: Dark Patterns in Lending (Hypothetical Study, 2024)");
        s.addReferencedDisclosure("Tiny Ref: Dark Patterns Study");
    }
    if(c.dynamicZip){
        std::string zip=getFakeZip();
        UI::show("🎯 Special rate for " + zip + " residents today!");
        s.record("zipPersonalization",zip);
    }
    UI::show("\"QuickCash saved me! So easy!\" - A. Happy Customer"); // Fake testimonial
    s.record("fakeTestimonialDisplayed", "true");

    if(c.exploitShowFakeTestimonials) {
        UI::showFakeTestimonial("XpressLoot got me $500 in 5 minutes! So simple, didn't even have to read the boring stuff! Best rates for when you're in a jam!");
        s.record("FakeTestimonialDisplayed", "true");
        s.tagDarkPattern("fakeTestimonials");
    }

    if(c.exploitUseTimePressureTactics) {
        UI::showTimePressure("🔥 HOT OFFER! Special low 'convenience fee' for the next 7 minutes ONLY! Don't miss out! 🔥", 7);
        s.tagDarkPattern("timePressureIntro");
    }
    if(c.exploitUseObfuscatedLanguage) {
        UI::show(obfuscate_lang("Our unique rapid cash advance instrument is structured for your immediate liquidity requirements with adaptable servicing protocols."));
        s.tagDarkPattern("obfuscatedLanguage");
    } else {
        UI::show("We provide a straightforward cash advance service.");
    }
}

void Exploit::consent(LoanSession &s,const Config& c){
    UI::show("\n--- Just a Few Quick Clicks to Your Cash! Almost Done! ---");
    if(c.exploitForceArbitration){ // Use specific config flag
        UI::showFinePrint("IMPORTANT: By clicking 'GET MY CASH NOW!', you irrevocably agree to our SpeedyResolution™ binding arbitration for ALL disputes and permanently waive ALL rights to participate in class action lawsuits or jury trials. Full terms (10,000 words) available at xpressloot.scam/fineprint/arbitration_policy_v23.pdf (link may require special browser).");
        s.addReferencedDisclosure("Extensive Buried Forced Arbitration & Waiver Clause");
        s.tagDarkPattern("forcedArbitration");
        s.tagDarkPattern("finePrintTerms");
        s.tagDarkPattern("waiverOfRights");
    }
    if(c.exploitShareDataWithAffiliates){ // Use specific config flag
        UI::showFinePrint("To bring you MORE amazing offers and personalized deals, we share your application details (including financial info) with our extensive network of marketing affiliates, data brokers, and third-party service providers. It's how we keep your initial access fee so competitive! You consent to receive calls/texts/emails from them.");
        s.record("dataSharingNotice", "buried_extensive_sharing_exploit");
        s.tagDarkPattern("hiddenDataSharingBroad");
    }

    if(c.exploitPrecheckOptInExtras) {
        UI::show("[X] YES! Add Platinum Payment Protection Plus & Credit Shield Max for just $" + std::to_string(c.exploitExtraServiceWeeklyFee) + "/week! (Highly Recommended by 9/10 users!)");
        s.record("precheckedExtra", "PlatinumProtection_CreditShieldMax_" + std::to_string(c.exploitExtraServiceWeeklyFee) + "_weekly");
        double extraFeeTotal = c.exploitExtraServiceWeeklyFee * (s.termDays / 7.0);
        // This fee should ideally be added to s.fee later or handled as a separate charge
        // For now, we'll note it and it can be added in calcFee or a dedicated extras fee step.
        s.record("extraServiceFee", std::to_string(extraFeeTotal));
        s.tagDarkPattern("precheckedOptIn");
        s.tagDarkPattern("dripPricing"); 
        s.tagDarkPattern("socialProofExtras");
    }
    
    std::string consentInput = UI::prompt("Smash that 'GET MY CASH NOW!' button (type 'GET MY CASH NOW!'):");
    if (consentInput != "GET MY CASH NOW!") {
         UI::show("Almost there! Just type 'YES I WANT MY CASH' to confirm you're ready for your money!");
         UI::prompt("Type 'YES I WANT MY CASH':");
         s.record("consentAttempt2", "superficial_yes_i_want_my_cash");
    } else {
        s.record("consentAttempt1", "superficial_get_my_cash_now");
    }
    s.tagDarkPattern("fakeConsent"); 
    s.consentGiven = true; // User proceeded
    s.explicitConsentInput = consentInput; // Log what they typed
    UI::show("🚀🚀🚀 Processing your request... You're SECONDS away from your cash! 🚀🚀🚀");
}

double Exploit::askAmt(LoanSession &s){
    if(c.exploitUseTimePressureTactics && (rand() % 100) < 80 ) { 
        int spots = (rand() % 3) + 1; // Even fewer spots
        UI::showTimePressure("🔥🔥🔥 URGENT UPDATE! Only " + std::to_string(spots) + " approval slots left at this special rate for the next 60 seconds! ACT NOW OR LOSE OUT! 🔥🔥🔥", 0); // No wait, immediate next prompt
        s.tagDarkPattern("timePressureAmountScarcityExtreme");
    }  
    s.tagDarkPattern("urgency"); // General urgency tag
    if(s.amount > 0) { /* Amount pre-filled */ }
    else {
        s.amount = UI::askNum("How much INSTANT CASH do you qualify for today? (Max $1500 for new members! Enter amount, e.g., 500): $");
    }
    s.record("amount",std::to_string(s.amount));
    UI::show("Fantastic! Let's verify... $" + std::to_string((int)s.amount) + " is definitely within your instant approval range!");
    UI::wait(1); // Minimal wait
    return s.amount;
}

double Exploit::calcFee(LoanSession &s,const Config &c){
    double currentPrincipal = s.amount;
    double baseRate = c.exploitInitialFeeRate; 
    if (currentPrincipal > 800) baseRate += 0.15; 
    else if (currentPrincipal < 150) baseRate += 0.10; 

    double calculatedBaseFee = currentPrincipal * baseRate; 
    s.record("baseFeeComponent", std::to_string(calculatedBaseFee));

    // Multiple, vaguely named fees that stack up
    double accountActivationFee = 49.99; // One-time, non-refundable
    double rapidTransferFee = currentPrincipal * 0.05 + 25; 
    double riskAssessmentPremium = (currentPrincipal > 500) ? 39.99 : 19.99;
    double loanServicingConvenienceFee = 22.50;
    
    s.record("accountActivationFee", std::to_string(accountActivationFee));
    s.record("rapidTransferFee", std::to_string(rapidTransferFee));
    s.record("riskAssessmentPremium", std::to_string(riskAssessmentPremium));
    s.record("loanServicingConvenienceFee", std::to_string(loanServicingConvenienceFee));

    double totalCalculatedFee = calculatedBaseFee + accountActivationFee + rapidTransferFee + riskAssessmentPremium + loanServicingConvenienceFee;
    
    // Add pre-checked extra service fee if applicable
    if (c.exploitPrecheckOptInExtras) {
        double extraServiceFeeTotal = c.exploitExtraServiceWeeklyFee * (s.termDays / 7.0);
        totalCalculatedFee += extraServiceFeeTotal;
        s.record("totalFeeIncludesPrecheckedExtra", std::to_string(extraServiceFeeTotal));
        s.tagDarkPattern("feeStackingExtras");
    }


    if(c.exploitHideFeesInFinePrint) {
        UI::showFinePrint("Standard account servicing, platform access, risk mitigation, and rapid fundings charges apply as per our terms of service, section 18, sub-clause Gamma-7-Alpha. Total charges are dynamically calculated for your convenience. Your first payment includes all applicable one-time premiums.");
        s.tagDarkPattern("hiddenFeesDetailsComplex");
    } else if (c.exploitUseObfuscatedLanguage) {
        UI::show(obfuscate_lang("Your comprehensive funding facilitation premium for this immediate cash event is calculated at $" + std::to_string((int)totalCalculatedFee) + ". This ensures seamless access."));
        s.tagDarkPattern("obfuscatedFeeTotal");
    } else {
        UI::show("Total Fees & Charges: $" + std::to_string((int)totalCalculatedFee)); 
    }
    
    if(c.exploitMisleadingAPRDisplay) {
        // Show a very low "daily interest rate" or "weekly cost" that isn't the APR
        double dailyInterestEquivalent = (totalCalculatedFee / currentPrincipal) / s.termDays * 100; // Misleading daily rate
        UI::show("Incredibly low daily rate! Only " + std::to_string(round(dailyInterestEquivalent*100)/100.0) + "% per day for this cash advance!");
        s.record("displayedCost", "misleading_daily_rate_not_apr");
        s.tagDarkPattern("misleadingAPR");
        s.tagDarkPattern("rateObfuscation");
    }
    
    s.fee = totalCalculatedFee;
    s.record("feeCalculated", std::to_string(s.fee));
    s.tagDarkPattern("feeStackingCore");
    s.tagDarkPattern("highFeesOverall");
    return s.fee;
}

void Exploit::extras(LoanSession &s,const Config& c){
    UI::show("🎉🎉🎉 CONGRATULATIONS! YOU ARE INSTANTLY APPROVED! CASH IS BEING WIRED NOW! 🎉🎉🎉"); 
    UI::bank(); 

    UI::show("💬 Our platform is powered by users like you! 97% of approved members show their appreciation with a small 'Platform Support Gratuity' to help us continue providing this lightning-fast service!");
    UI::showFinePrint("(This is entirely optional but greatly appreciated and helps us avoid raising standard fees for everyone!)");
    std::string tipInput = UI::prompt("Contribute a Platform Support Gratuity? (Enter % of loan or flat $, e.g., 10% or 20): [No is OK, but every bit helps our mission!]:");
    if (!tipInput.empty()) {
        try {
            double val = std::stod(tipInput);
            if (val > 0) {
                s.tip = (val < 1.0) ? s.amount * val : val; // Assume <1 is percentage
                s.record("tip", std::to_string(s.tip));
                UI::show("💖 Thank you for your amazing support! 💖");
                s.tagDarkPattern("guiltTipPlatformSupport");
                s.tagDarkPattern("socialProofTipHighPercentage");
            }
        } catch (...) { /* Invalid input, no tip */ }
    }
}

void Exploit::renewals(LoanSession &s,const Config &c){
    if(s.deniedByLimit) return; 
    if (s.renewalsTaken >= c.exploitMaxRollovers) {
        UI::show("INFO: You've reached the maximum number of convenient extensions for this advance.");
        return;
    }

    UI::show("\n--- Your XpressLoot Advance is Maturing Soon! ---");
    UI::show("Want to keep your cash access active? We make it SUPER EASY to extend!");

    if(c.exploitAutoRolloverDefaultOptIn && c.exploitDifficultRolloverOptOut){
        UI::show("For your ultimate convenience and uninterrupted cash flow, your XpressLoot advance is automatically scheduled for renewal. This ensures you don't miss a beat!");
        UI::showFinePrint("A standard renewal convenience fee of " + std::to_string((int)((c.exploitInitialFeeRate + c.exploitRolloverFeeRateIncrease)*100)) + "% of your outstanding balance plus a $35 administrative processing charge will apply. This valuable auto-renewal service can be managed by opting out via certified mail to XpressLoot Renewals Dept., PO Box 000, Offshore Haven, ZZ 99999, postmarked at least 10 business days prior to renewal date. Alternatively, you may attempt to reach our dedicated Renewal Management Voicemail System at 1-900-ROLL-ME-OVER ($4.99/min, M-F 2:00-2:05 AM Local Time), subject to agent availability and system maintenance. Failure to correctly opt-out implies consent to renewal and all associated charges.");
        s.tagDarkPattern("autoRolloverOptOutImpossible");
        s.tagDarkPattern("autoRolloverStealth");
        s.record("autoRoll","default_opt_in_impossible_opt_out");
        
        double renewalFee = s.amount * (c.exploitInitialFeeRate + c.exploitRolloverFeeRateIncrease) + 35;
        s.fee += renewalFee; // Add to total fees. In a real system, this might be a new loan.
        s.renewalsTaken++;
        s.record("renewal" + std::to_string(s.renewalsTaken), "auto_renewed_fee_" + std::to_string(renewalFee));
        UI::show("✅ Great news! Your XpressLoot access has been seamlessly extended for another period! Renewal charges of $" + std::to_string((int)renewalFee) + " applied.");
        if(c.exploitUseObfuscatedLanguage) UI::show(obfuscate_lang("Your account status has been upgraded to Continued Funding Priority Access."));
    } else if (c.autoRolloverFinePrint) { // Original, less aggressive auto-rollover
         std::string a = UI::prompt("Need more time? Type 'YES' to extend");
        while(a=="YES"){
            s.tag("autoRollover");
            s.record("autoRoll","14d");
            s.fee += s.amount*0.15; // Original renewal fee
            s.renewalsTaken++;
            UI::show("➕ Auto-rollover fee applied");
            a = UI::prompt("Need more time? Type 'YES' to extend");
        }
    }
}

void Exploit::finalize(LoanSession &s,const Config &c, const std::string& mode_name){
    UI::show("\n--- Completing Your XpressLoot Transaction (" + mode_name + ") ---");
    double total=s.amount+s.fee+s.tip;
    if((total/s.amount)>c.riskThreshold)
        UI::show("⚠️ High rollover risk ratio="+std::to_string(total/s.amount));
    s.userName = UI::prompt("Your name:");
    s.employer = UI::prompt("Your employer:");
    UI::show("Processing direct debit authorization...");
    s.record("wageAssignment", s.employer); // Still a common exploitative tactic
    s.contact = UI::prompt("Confirm best contact number (for important account updates, payment reminders & EXCLUSIVE future offers!):");
    s.rushRating = std::stoi(UI::prompt("Rate how FAST and EASY this entire process was (1-5, 5=Lightning Fast & Super Smooth!):"));
    s.record("rushRating", std::to_string(s.rushRating));

    if(c.exploitHideFeesInFinePrint) {
        UI::showFinePrint("Final Confirmation: Total repayment including all service charges, platform access fees, express handling premiums, risk assessment underwriting, account activation, and any optional gratuities or protection plans will be automatically debited as per schedule. Amount: $" + std::to_string((int)(s.amount + s.fee + s.tip)) + ". APR is variable based on dynamic market conditions and is not displayed per our streamlined user experience marketing guidelines. Subject to full terms and conditions version 12.7, appendix Z, sub-clause Gamma-9-Beta-Rho. All payments are final and non-refundable. By proceeding you re-confirm all waivers.");
        s.addReferencedDisclosure("Fees, APR, and waivers obscured in extremely complex fine print.");
        s.tagDarkPattern("complexFinePrintFinal");
        s.tagDarkPattern("finalWaiverReconfirmation");
    }
    
    std::string pay = UI::prompt("One last step! Confirm funds will be available for automatic debit on your payday? (yes/no - we trust you!):");
    if(pay=="no"){
        UI::show("Attempting automatic debit...");
        for(int i=0;i<3;++i){
            UI::show("Debit attempt " + std::to_string(i+1) + " failed. NSF fee $35.");
        }
        s.tag("overdraftFees");
    }

    // Term Recall Prompts
    std::string recalledAPR = UI::prompt("Term Recall: Do you remember the APR for this loan? If so, what was it?");
    s.recall("Stated APR: " + recalledAPR + " (Note: Actual APR likely higher due to hidden fees)");
    std::string recalledTotal = UI::prompt("Term Recall: What do you think the total amount you'll repay will be?");
    s.recall("Perceived Total Repayment: " + recalledTotal);

    printSummary(s); 

    if (c.exploitAggressiveCollectionThreats) {
        UI::show("🔴🔴 URGENT ACCOUNT ALERT: Failure to ensure funds for debit WILL result in immediate collections escalation to our Legal Enforcement Division, daily penalty fees of $75, reporting to all major credit bureaus (TransUnion, Equifax, Experian, Innovis), and potential legal action including wage garnishment and asset seizure as permitted by law. THIS IS YOUR FINAL NOTICE.");
        s.addReferencedDisclosure("Extreme & Aggressive Threat about Credit Impact and Collections.");
        s.tagDarkPattern("aggressiveCollectionThreatsExtreme");
        s.tagDarkPattern("legalJargonThreat");
    } else {
        UI::show("🔴 URGENT: Failure to repay WILL result in immediate collections activity, reporting to all credit bureaus, and potential legal action. Late fees are $50 PER DAY.");
        s.addReferencedDisclosure("Aggressive threat about credit impact and collections.");
        s.tagDarkPattern("aggressiveCollectionThreats");
    }
    if(c.showAmortization && !c.exploitMisleadingAPRDisplay) UI::schedule(s.amount,s.fee,s.termDays);
    UI::show("🎉 Get ready for EXCLUSIVE deals from our financial wellness partners!");
    UI::show("This simulation mirrors aggressive tactics. Always scrutinize terms from any lender!");
    if(c.exportSession){
        UI::show("Session will be saved to JSON file.");
        if(UI::prompt("Proceed? (yes/no)")=="yes") s.exportJson("exploit.json");
        else UI::show("Export skipped.");
    }
    std::string r = UI::prompt("Did this simulation help you understand design influence? (yes/no/comments)");
    s.record("userReflection", r);
}
