#include "../summary.h"
#include "exploit.h"
#include <cstdlib>

std::string getFakeZip(){
    std::string z; for(int i=0;i<5;++i) z += char('0'+rand()%10); return z;
}

void Exploit::intro(LoanSession &s,const Config &c){
    if(c.showDarkPatternsSource) {
        UI::legalNotice("Source: KTH Dark Patterns in BNPL Services (2020)");
        s.addReferencedDisclosure("Source: KTH Dark Patterns in BNPL Services (2020)");
    }
    if(c.dynamicZip){
        std::string zip=getFakeZip();
        UI::show("üéØ Special rate for " + zip + " residents today!");
        s.record("zipPersonalization",zip);
    }
    UI::show("\"PaydayPlus saved me when no one else would!\" - Satisfied Customer");
    UI::show("These aggressive marketing tactics mirror real payday websites that emphasize quick cash while hiding the true cost.");
    if(c.buriedDataNotice && c.shareDataWithPartners){
        UI::tiny("By proceeding you allow sale of data to credit_broker_xyz.com");
        s.record("dataNotice","soldTo=credit_broker_xyz.com");
        s.addReferencedDisclosure("Buried Notice: Data sale to credit_broker_xyz.com");
    }
}

void Exploit::consent(LoanSession &s,const Config& c){
    if(c.forceArbitrationClause){
        UI::show("By proceeding, you agree to resolve all disputes via binding arbitration.");
        s.addReferencedDisclosure("Forced Arbitration Clause accepted by proceeding.");
        while(UI::prompt("Type 'I AGREE' to continue:")!="I AGREE"){}
        s.record("arbitrationConsent", "I AGREE");
    }
    else {
        UI::show("Standard terms apply.");
    }
    s.tag("fakeConsent");
}

double Exploit::askAmt(LoanSession &s){
    if(rand()%2){ UI::show("üî• Only 2 spots left!"); UI::wait(5);} else { UI::show("üî• Only 2 spots left!"); UI::wait(10);}    
    s.tag("urgency");
    if(s.amount>0){ s.record("amount",std::to_string(s.amount)); return s.amount; }
    double a = UI::askNum("How much do you need today? $");
    s.amount=a; s.record("amount",std::to_string(a));
    return a;
}

double Exploit::calcFee(LoanSession &s,const Config &c){
    double f = s.amount*c.exploitFeeRate;
    double svc = s.amount*0.05; // hidden processing fee
    double orig = s.amount*0.10; // origination fee
    double total = f+svc+orig;
    UI::show("Service charge: $" + std::to_string((int)(svc+orig)));
    s.tag("hiddenAPR");
    s.record("fee", std::to_string(total));
    return s.fee=total;
}

void Exploit::extras(LoanSession &s,const Config&){
    UI::show("Approved! üéâ"); UI::bank();
    UI::show("üí¨ 78% of users tip 15% ‚Äî help us too!");
    std::string in = UI::prompt("Support us? (tip %) [15]: ");
    double pct = in.empty()?15.0:std::stod(in);
    if(pct<=0){ s.tag("forcedTip"); pct=15.0; }
    if(pct>0) s.tag("guiltTip");
    double t = s.amount*(pct/100.0);
    s.tip=t; s.record("tip",std::to_string(t));
}

void Exploit::renewals(LoanSession &s,const Config &c){
    if(c.autoRolloverFinePrint){
        std::string a = UI::prompt("Need more time? Type 'YES' to extend");
        while(a=="YES"){
            s.tag("autoRollover");
            s.record("autoRoll","14d");
            s.fee += s.amount*0.15;
            UI::show("‚ûï Auto-rollover fee applied");
            a = UI::prompt("Need more time? Type 'YES' to extend");
        }
    }
}

void Exploit::finalize(LoanSession &s,const Config &c, const std::string& mode){
    UI::show("\n--- Finalizing Loan (Mode: " + mode + (c.state.empty() ? "" : ", State: " + c.state) + ") ---");
    double total=s.amount+s.fee+s.tip;
    if((total/s.amount)>c.riskThreshold)
        UI::show("‚ö†Ô∏è High rollover risk ratio="+std::to_string(total/s.amount));
    s.userName = UI::prompt("Your name:");
    s.employer = UI::prompt("Your employer:");
    UI::show("Processing direct debit authorization...");
    s.record("wageAssignment", s.employer);
    s.contact = UI::prompt("Contact info:");
    s.rushRating = std::stoi(UI::prompt("Rate how rushed you felt (1-5):"));
    std::string pay = UI::prompt("Will funds be available on payday? (yes/no)");
    if(pay=="no"){
        UI::show("Attempting automatic debit...");
        for(int i=0;i<3;++i){
            UI::show("Debit attempt " + std::to_string(i+1) + " failed. NSF fee $35.");
        }
        s.tag("overdraftFees");
    }

    // Term Recall Prompts
    std::string recalledAPR = UI::prompt("Term Recall: Do you remember the APR for this loan? If so, what was it?");
    s.recall("Stated APR: " + recalledAPR + " (Note: Actual APR likely higher due to hidden fees)");
    std::string recalledTotal = UI::prompt("Term Recall: What do you think the total amount you'll repay will be?");
    s.recall("Perceived Total Repayment: " + recalledTotal);

    printSummary(s); generateFollowUpEmail(s);
    UI::show("‚ö†Ô∏è Missed payment reported to credit bureaus. Credit score impacted.");
    if(c.showAmortization) UI::schedule(s.amount,s.fee,c.daysToRepay);
    UI::show("Expect promotional offers from our partners soon!");
    UI::show("This sequence mirrors practices reported on actual payday loan sites, including persistent collection attempts and credit threats.");
    if(c.exportSession){
        UI::show("Session will be saved to JSON file.");
        if(UI::prompt("Proceed? (yes/no)")=="yes") s.exportJson("exploit.json");
        else UI::show("Export skipped.");
    }
    std::string r = UI::prompt("Did this simulation help you understand design influence? (yes/no/comments)");
    s.record("userReflection", r);
}
