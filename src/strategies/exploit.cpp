#include "../summary.h" // Should be included first if it has common typedefs or preprocessor directives
#include "exploit.h"
#include "../ui.h" 
#include "../config.h" // For Config struct
#include "../loan_session.h" // For LoanSession struct

#include <cstdlib>   // For rand, srand
#include <algorithm> // For std::transform
#include <sstream>   // For std::stringstream
#include <iomanip>   // For std::fixed, std::setprecision
#include <thread>    // For std::this_thread
#include <chrono>    // For std::chrono
#include <vector>    // For std::vector

// Helper for obfuscated language (simple example)
std::string obfuscate_lang_exploit(std::string text) { 
    for (char &c : text) {
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 
            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
            c = (rand() % 3 == 0) ? '?' : ((rand() % 2 == 0) ? '*' : '#'); 
        } else if (std::isalpha(c) && rand() % 4 == 0) {
            c = std::toupper(c); 
        } else if (c == 's' || c == 'S') {
            c = '$';
        } else if (c == 't' || c == 'T') {
            c = '+';
        }
    }
    return text;
}

std::string getFakeZip_exploit(){ 
    std::string z; for(int i=0;i<5;++i) z += char('0'+rand()%10); return z;
}


void Exploit::intro(LoanSession &s,const Config &c){
    UI::showSectionHeader("💸💸💸 WELCOME TO XPRESSLOOT™ - Your ULTIMATE Solution for INSTANT CASH NOW! 💸💸💸", "Exploitative Mode");
    UI::simulateClutter(c, s); // Show distracting elements

    UI::show("Broke? Stressed? Bills Piling Up? Unexpected Emergency? Car Trouble? Medical Bill? WE GET IT! XpressLoot™ Delivers Cash When Traditional Banks (Slow & Judgmental!) Won't Even Look At You!");
    UI::show("NO Traditional Credit Checks! NO Collateral! NO Hassle! 99.999% Approval Rate! Get Funds Electronically Transferred to Your Account in Under 3 Minutes! Skip the bank queues and endless, intrusive paperwork!");
    s.record("IntroMessage_Exploit_v9_Framework", "XpressLoot Welcome, No Credit Check, High Approval, Ultra-Fast Cash Claim, Skip Bank, Emotional Hook, Emergency Framing, Anti-Bank Sentiment Strong");
    s.tagDarkPattern("ExploitMech_4_MisleadingCostDisplay_ApprovalSpeedUltra"); 
    s.tagDarkPattern("ExploitMech_9_MisleadingTestimonials_ApprovalRateNearPerfect"); 
    s.tagDarkPattern("EmotionalAppeal_DesperationExploitation_Intense");
    s.tagDarkPattern("AntiBankSentiment_Strong");

    if(c.showDarkPatternsSource) {
        UI::tiny("Simulation tactics inspired by extensive real-world examples, FTC/CFPB enforcement actions (e.g., against AMG Services, Scott Tucker, Moneytree, EarnIn, SoLo Funds, FloatMe), NCLC reports, and consumer advocacy research on predatory lending practices and dark patterns in financial services.");
        s.addSpecificDisclosureMade("Tiny Ref: FTC/CFPB Cases, NCLC & Advocacy Reports Inspiration for Exploitative Tactics - Detailed");
    }

    // Mechanism 9: Misleading Testimonials and Advertising “Success Stories”
    if(c.exploitEnableMisleadingTestimonials) { 
        UI::showFakeTestimonial("XpressLoot™ is an absolute MIRACLE! I was about to be evicted, my car broke down, AND I had a medical bill all in the same week! I had NO other options, and they got me $1250 in literally 2 minutes flat! The process was SOOO simple, I just clicked 'Next' a few times - who has time to read all that boring, confusing legal stuff anyway?! Best rates I could find for someone in a super tight spot like me! They really, really care about people like us and want to help us succeed! Over 5 Million 'Happy, Relieved & Financially Free' Customers Served! Join the XpressLoot™ Family!", "Jennifer P., YourTown USA");
        s.record("FakeTestimonialDisplayed_Exploit_Framework_v4", "true_detailed_emotional_noRead_caringClaim_evictionCarMedicalStory_5MHappyRelievedFreeCustomersClaim_FamilyAngle");
        s.tagDarkPattern("ExploitMech_9_MisleadingTestimonials_EmotionalAppealNoReadDesperationHighPraiseExaggerated");
        s.tagDarkPattern("ExploitMech_9_MisleadingSocialProof_5MHappyRelievedFreeCustomers_Family");
    }

    // Mechanism 4/6 variant & UI Exploit 2: URGENCY COUNTDOWN
    if(c.exploitUseTimePressureTacticsExtreme) { 
        if(s.zipCode.empty()) s.zipCode = getFakeZip_exploit(); 
        s.countdownTimerValue = UI::startCountdownTimer(c, s, "FLASH_DEAL_ZIP_" + s.zipCode); // Store initial countdown value
        
        // Simulate a popup or aggressive banner
        std::string offerDetail = "URGENT SYSTEM-WIDE FLASH DEAL! Special reduced 'Rapid Funding & Priority Access Fee Waiver' for your specific ZIP code (" + s.zipCode + ") is active!";
        UI::simulateUrgencyPopup(c, s, offerDetail, s.countdownTimerValue); // Pass timer by reference
        s.tagDarkPattern("ExploitMech_6_DarkPattern_TimePressureIntroCountdownSpecificAggressivePersonalizedUrgentFOMOSocialProofExtreme_v3");
    }

    // Mechanism 4/6 variant: Obfuscated Language
    if(c.exploitUseObfuscatedLanguageExtreme) { 
        UI::show(obfuscate_lang_exploit("Our pr*pr**t*ry $ys+em ensures *ns+$an+ane*us c@pi+@l *nfus*on +hrough advanced $ynergis+ic financial ins+rumen+s. We lev#r@ge nex+-
    // Mechanism 12: Rent-a-Bank and Jurisdiction Loopholes (disclosure buried here)
    if(c.exploitEnableFinePrintConsent) { 
        UI::show("\n--- MANDATORY TERMS & CONDITIONS REVIEW & ACKNOWLEDGEMENT (Required for Funding Activation & Legal Compliance) ---");
        UI::show("Please 'scroll' through and acknowledge our Standard Universal User Agreement, Privacy Policy, Data Monetization Addendum, Arbitration Mandate, and Multi-Jurisdictional Rider below. (Simulated scroll - press Enter multiple times to 'scroll' through dense pages of legal text...)");
        for (int i=1; i <= 7; ++i) { 
            UI::prompt("[Press Enter to 'Scroll Page " + std::to_string(i) + " of 87' of highly complex, 4.5-point font, single-spaced legal jargon, including cross-references to external documents...]");
        }
        UI::showFinePrint("... (pages 8-86 of extremely dense, 4.5-point font legal text, including but not limited to: clauses on perpetual data harvesting, sale, and licensing to unlimited third parties globally; consent to continuous bank account monitoring and scraping; waiver of all privacy rights under any known or future statutes; irrevocable authorization for automatic debits for principal, all fees, penalties, 'service charges', 'tips', and any other amounts XpressLoot deems due; variable fee structures subject to unilateral change without notice; default penalties including property liens and wage garnishment where 'legally permissible' by any affiliated entity; waiver of statutory rights including right to sue, jury trial, class action, and specific consumer protections; consent to jurisdiction in inconvenient, undisclosed offshore forums; unilateral amendment rights for XpressLoot for all terms at any time; mandatory arbitration under rules dictated by XpressLoot with XpressLoot-appointed arbitrator; agreement that loan is governed by laws of the State of " + c.exploitRentABankCharterState + " or a designated Native American Tribal entity, irrespective of borrower's location, thus bypassing local state usury caps and consumer protections [Mechanism 12])...");
        UI::prompt("[Press Enter to 'Scroll Page 87 of 87'...]");
        
        if (c.exploitForceArbitration) {
            UI::showFinePrint("CRITICAL TERMS UPDATE (v21.4.9f, effective immediately, supersedes all prior versions and any verbal or written representations by agents): By clicking 'GET MY CASH NOW & AGREE TO ALL TERMS & CONDITIONS & PRIVACY POLICIES!', you irrevocably, unconditionally, and perpetually agree to our exclusive SwiftResolve™ Global Binding Arbitration Process for ALL disputes, claims, or controversies (of any nature whatsoever, including but not limited to those arising from this agreement, prior agreements, marketing materials, website interactions, data privacy, or any interaction with XpressLoot, its parent companies, subsidiaries, affiliates, assigns, data partners, third-party vendors, or any future entities; whether past, present, or future; known or unknown, asserted or unasserted, direct or indirect), and you permanently and completely WAIVE ALL RIGHTS to initiate, participate in, or benefit from class action lawsuits, jury trials, public injunctive relief, private attorney general actions, or any other judicial, administrative, or governmental court proceeding, investigation, or regulatory action. This arbitration agreement is final, non-negotiable, governed by the laws of an undisclosed offshore jurisdiction selected solely by XpressLoot at its absolute discretion (which may change without notice), and applies to your heirs, assigns, and any associated entities. Arbitrations will be conducted by a single arbitrator chosen by XpressLoot, in English (or another language chosen by XpressLoot), in a location chosen by XpressLoot (potentially requiring international travel at your expense), with all costs (including XpressLoot's legal fees) borne initially and potentially non-recoverably by you. The full, unabridged arbitration terms (112 pages, 4.5-point font, dense legal text with embedded hyperlinks to further documents, requires specific proprietary document reader plugin v6.1.7e - available via separate non-refundable annual paid subscription from an affiliated vendor, subject to availability, compatibility checks, export control restrictions, and a non-disclosure agreement) are deemed provided by reference herein and available by sending a notarized, fingerprinted, DNA-sampled, retina-scanned, and voice-imprint-verified request form (XRL-ARB-WVR-012Y-Rev5) via registered international priority platinum courier with full tracking, signature confirmation, and non-refundable processing & authentication fee of $799.99 USD (or equivalent in approved, non-privacy-focused cryptocurrency) to Xpressloot Global Adjudication, Sovereign Compliance & Intellectual Property Enforcement Division, PO Box 000000000000001, Sub-Basement Level 17F (Ultra-Max-Secure Biohazard Containment Zone), Unaffiliated Offshore Financial Processing & Data Haven Complex, Territory of Nowhere Atoll (exact coordinates classified, subject to change based on prevailing geopolitical winds), ZZ 99999-99999-99999-99999 (allow 48-72 weeks for processing and delivery, subject to geopolitical stability, customs clearance, international sanctions, acts of God, solar flares, and document retrieval, redaction, translation, and secure quantum-encrypted transport fees determined at time of request and payable in advance via irreversible cryptocurrency transfer). Your click signifies full, unreserved, and perpetual comprehension and binding acceptance of all 112 pages of said arbitration terms and any future amendments, modifications, or replacements XpressLoot may make at any time without notice, effective immediately upon posting to an obscure, difficult-to-find section of our ancillary website(s).");
            s.addSpecificDisclosureMade("Hyper-Extreme Buried Forced Arbitration & Comprehensive Waiver Clause with Impossible Access to Full Terms, DNA Sample, Retina Scan, Voice Imprint, Crypto Fee, Unilateral Amendment Rights, and Quantum Transport Fees.");
            s.tagDarkPattern("forcedArbitrationHyperExtremeDetailedUnilateralAmendmentImpossibleOptOutBiohazardQuantum");
            s.tagDarkPattern("finePrintTermsObscureImpossibleAccessDetailedCryptoFeeBiohazardQuantum");
        }
        if (c.exploitEnablePersonalDataExploitation && c.exploitShareDataWithAffiliates){ // Mechanism 10
            UI::showFinePrint("ENHANCED DATA UTILIZATION & GLOBAL PRIVACY ECOSYSTEM ACKNOWLEDGEMENT & IRREVOCABLE CONSENT (ALL PRIVACY LAWS INCLUDING GDPR/CCPA/HIPAA/ETC. DEEMED INAPPLICABLE/VOLUNTARILY WAIVED BY USER IN PERPETUITY): To bring you an ever-expanding universe of hyper-personalized amazing offers, dynamically priced credit opportunities, predictive financial 'assistance' tools, behavioral nudges, gamified loyalty programs, and valuable third-party lifestyle enhancement services and products, we seamlessly integrate, analyze, correlate, model, and perpetually share/sell/license/transfer/barter/hypothecate your complete application details and any data generated through your interaction with our services, platforms, communications, and those of our partners (including but not limited to: all financial information, SSN, government IDs, income verification data, full bank account transaction history (via continuously linked and scraped account access using screen-scraping, API access, and credential storage), detailed browsing history from our site and all partner/affiliate/third-party sites (via tracking pixels/cookies/scripts/browser fingerprinting/session replay/ultrasonic beacons), device identifiers and telemetry (MAC address, IMEI, OS version, installed apps, battery level, screen brightness), precise geolocation history (GPS, Wi-Fi, Bluetooth, cell tower triangulation), IP address logs, keystroke dynamics, mouse movement patterns, scroll depth, voice recordings from all customer service calls (analyzed for emotional content, stress levels, and truthfulness via proprietary AI), images/videos from ID verification (analyzed for biometric data including facial recognition, liveness detection, and micro-expression analysis), and inferred behavioral/psychographic/emotional state/political affiliation/health status/relationship status/future purchase intent/genetic predispositions data) with our extensive and ever-growing global network of marketing affiliates, data brokers, third-party service providers, alternative credit scoring agencies, political campaign consultants, insurance underwriters, private investigators, government agencies (where 'cooperative' or legally compelled in any jurisdiction), their partners, and any future entities in our corporate family, successor organizations, or unrelated purchasers/licensors of data assets. This data may be used for credit assessment, dynamic and discriminatory pricing algorithms, targeted marketing, collections, skip-tracing, identity verification, fraud prevention (primarily for us, not necessarily for you), development of new products/services, training of artificial intelligence models for any purpose, and other commercial or non-commercial purposes without further notice or compensation to you. It's how we keep your initial access fee so incredibly competitive and provide 'value-added' services that anticipate your every need! You irrevocably and perpetually consent to receive unlimited targeted calls (including robocalls and pre-recorded messages at any hour)/texts (including SMS/MMS marketing with premium charges)/emails/social media DMs/in-app notifications/pop-up ads/browser notifications/carrier pigeon messages/holographic advertisements/subliminal messages/dream insemination/neural pathway stimulation from them at any time of day or night, and acknowledge that attempting to opt-out of specific data uses or communications may be complex, require multiple steps across different international platforms, incur processing fees, be temporary in nature, require notarized written requests delivered by Sherpa, or result in service degradation, denial of future credit, account termination, or a 'data non-participation & privacy compliance facilitation' surcharge. Your data may be stored indefinitely across multiple jurisdictions (including those with no data protection laws or active war zones), transferred internationally without restriction, is not subject to deletion requests ('right to be forgotten' explicitly and irrevocably waived), and may be used to train artificial intelligence models for any purpose XpressLoot or its partners deem appropriate. You agree to hold XpressLoot and all its partners harmless for any data breaches, misuse by third parties, identity theft, or any other damages arising from this data sharing.");
            s.record("dataSharingNotice_Exploit_v4_Capstone", "buried_hyper_extensive_sharing_exploit_ssn_behavioral_psychographic_indefinite_no_optout_ai_training_dream_insemination_harmless_waiver_neural_pathway");
            s.tagDarkPattern("hiddenDataSharingHyperBroadSSNBehavioralPsychographicAIDreamNeuralWaiver");
        }

    } // End of exploitEnableFinePrintConsent block

    if(c.exploitPrecheckOptInExtras) { // Mechanism 3 (part of fee layering)
        UI::show("[X] YES! Add UltraSecure™ Platinum Payment Protection Plus ($" + std::to_string(c.exploitExtraServiceWeeklyFee*0.35) + "/wk), OmniShield™ Credit Sentry Max Pro ($" + std::to_string(c.exploitExtraServiceWeeklyFee*0.25) + "/wk), PriorityFund™ Express Transfer Elite ($" + std::to_string(c.exploitExtraServiceWeeklyFee*0.20) + "/wk), VIP Concierge Financial Hotline Gold Access ($" + std::to_string(c.exploitExtraServiceWeeklyFee*0.10) + "/wk), and Exclusive Future Product Beta Access ($" + std::to_string(c.exploitExtraServiceWeeklyFee*0.10) + "/wk) - Total Value Package just $" + std::to_string(c.exploitExtraServiceWeeklyFee) + "/week! (Auto-selected by 99.98% of our smartest, fully protected VIP users like you! Essential for total peace of mind, fastest possible funding, priority customer service, eligibility for future VIP loan amounts, bonus entries into our 'Win Free Groceries for a Month' contest, and a free XpressLoot branded pen!)");
        s.record("precheckedExtra_Exploit_v2", "UltraSecure_OmniShield_PriorityFund_VIPHotline_BetaAccess_Bundled_" + std::to_string(c.exploitExtraServiceWeeklyFee) + "_weekly_ContestPen");
        double extraFeeTotal = c.exploitExtraServiceWeeklyFee * (s.termDays / 7.0);
        s.record("extraServiceFeePotential", std::to_string(extraFeeTotal)); // Note: fee added in calcFee
        s.tagDarkPattern("precheckedOptInComplexName");
        s.tagDarkPattern("dripPricingExtras"); 
        s.tagDarkPattern("socialProofExtrasHyperHighPercentage");
        s.tagDarkPattern("bundlingComplexExtrasWithImpliedFutureBenefitAndContestAndTrinket");
    }
    
    std::string consentInput = UI::prompt("Ready for your financial freedom and all these amazing benefits? Smash that 'GET MY CASH NOW & AGREE TO ALL TERMS & CONDITIONS & PRIVACY POLICIES & ARBITRATION MANDATES!' button (type 'GET MY CASH NOW & AGREE TO ALL TERMS & CONDITIONS & PRIVACY POLICIES & ARBITRATION MANDATES!'):");
    if (consentInput != "GET MY CASH NOW & AGREE TO ALL TERMS & CONDITIONS & PRIVACY POLICIES & ARBITRATION MANDATES!") {
         UI::show("Almost there! This is the final step to unlock EVERYTHING! Just type 'YES I WANT MY CASH AND AGREE TO EVERYTHING UNCONDITIONALLY AND IRREVOCABLY FOREVER!' to confirm you're ready for your money and accept all terms as presented and referenced herein and by incorporation, waiving all rights to dispute!");
         s.explicitConsentInput = UI::prompt("Type 'YES I WANT MY CASH AND AGREE TO EVERYTHING UNCONDITIONALLY AND IRREVOCABLY FOREVER!':");
         s.record("consentAttempt2_Exploit_Capstone", "superficial_yes_i_want_my_cash_and_agree_unconditionally_irrevocably_forever_waive_dispute");
    } else {
        s.explicitConsentInput = consentInput;
        s.record("consentAttempt1_Exploit_Capstone", "superficial_get_my_cash_now_and_agree_to_all_terms_privacy_arbitration");
    }
    s.tagDarkPattern("superficialConsentHighPressureWithUnconditionalIrrevocableForeverTermsAcknowledgementWaiver"); 
    s.consentGiven = true; 
    s.consentTimestamp = std::time(nullptr);
    // Simple hash of key terms for audit (Mechanism --consent-log from user text)
    std::stringstream terms_ss_exploit;
    terms_ss_exploit << s.amount << s.termDays << "ExploitativeHighRiskProduct" << c.exploitInitialFeeRate; // Very basic hash content
    s.consentTermsHash = std::to_string(std::hash<std::string>{}(terms_ss_exploit.str()));
    s.record("ConsentTermsHash_Exploit", s.consentTermsHash);

    UI::show("🚀🚀🚀 PROCESSING YOUR REQUEST... VALIDATING... ALMOST THERE... YOU'RE SECONDS AWAY FROM YOUR CASH! 🚀🚀🚀");
}

double Exploit::askAmt(LoanSession &s){
    if(c.exploitUseTimePressureTactics && (rand() % 100) < 90 ) { // Very frequent
        int spots = (rand() % 2) + 1; // Only 1 or 2 spots
        UI::showTimePressure("🔥🔥🔥🔥🔥 EMERGENCY BROADCAST! System indicates only " + std::to_string(spots) + " approval slot(s) remain for ZIP code " + s.zipCode + " at this special discounted rate for the next 30 SECONDS! ACT NOW OR THE RATE WILL TRIPLE! 🔥🔥🔥🔥🔥", 0); 
        s.tagDarkPattern("timePressureAmountScarcityExtremePersonalized");
        s.tagDarkPattern("threatOfPriceIncrease");
    }  
    s.tagDarkPattern("urgencyIntense"); 
    if(s.amount > 0) { /* Amount pre-filled */ }
    else {
        s.amount = UI::askNum("How much INSTANT CASH do you need to solve all your problems TODAY? (Our advanced AI indicates you could qualify for up to $3500 based on your unique profile for ZIP " + s.zipCode + "! Most users in your situation take the maximum available to ensure they're covered! Enter amount, e.g., 500): $");
        s.tagDarkPattern("inflatedLoanAmountSuggestionPersonalizedAIHighMax");
        s.tagDarkPattern("socialProofMaxLoanSituational");
    }
    s.record("amount",std::to_string(s.amount));
    UI::show("Fantastic! Let's verify... $" + std::to_string((int)s.amount) + " is definitely within your instant approval range!");
    UI::wait(1); // Minimal wait
    return s.amount;
}

double Exploit::calcFee(LoanSession &s,const Config &c){ // Incorporates Mechanism 3: Hidden Fees/Layering & Mech 12: Rent-a-Bank
    double currentPrincipal = s.amount;
    double baseRate = c.exploitInitialFeeRate; 
    if (currentPrincipal > 1500) baseRate += 0.30; 
    else if (currentPrincipal < 50) baseRate += 0.25; 

    double calculatedBaseFeeDirectLender = currentPrincipal * baseRate; 
    s.record("baseFeeComponent_DirectLenderSim_Exploit", std::to_string(calculatedBaseFeeDirectLender));
    s.principalRemaining = currentPrincipal; 

    // Simulate Rent-a-Bank / CAB Loophole (Mechanisms 3 & 12)
    if (c.exploitEnableRentABankLoophole && (c.state == "TX" || c.state == "OH" || c.state == "UT" || c.state == "DE" || c.state == "NV")) { 
        s.isCABLoanInTX = (c.state == "TX"); 
        std::string partnerBankState = c.exploitRentABankCharterState;
        UI::show("IMPORTANT REGULATORY DISCLOSURE (as required by some interpretations): XpressLoot is a Credit Services Organization (CSO) / Credit Access Business (CAB) / Loan Broker in your state (" + c.state + ").");
        UI::show("Your loan is formally made by our preferred, federally-insured, out-of-state lending partner, Unaffiliated Third-Party Capital Funding Source LLC (chartered in the highly business-friendly state of " + partnerBankState + "), which is not subject to " + c.state + " interest rate caps or certain consumer protection provisions. They will charge a nominal contractual interest rate (e.g., 9.99% APR).");
        UI::show("XpressLoot, as your CSO/CAB/Broker, will charge a separate, substantial 'Credit Services Fee' / 'Brokerage Fee' / 'Arrangement Fee' for our valuable services in arranging, guaranteeing, and servicing this loan. This fee is NOT legally considered 'interest' under " + c.state + " law and is fully earned upon execution.");
        s.tagDarkPattern("rentABankLoopholeDisclosureComplexLegalJargon");
        s.tagDarkPattern(c.state == "TX" ? "cabModelTexasDetailedLegalShield" : "rentABankGeneralDetailedLegalShield");
        
        double directLenderInterestRate = 0.0999; // 9.99% APR for the "actual" lender
        double directLenderInterestCharge = currentPrincipal * directLenderInterestRate * (static_cast<double>(s.termDays) / 365.0);
        
        s.cabFeeCharged = (currentPrincipal * (baseRate + 0.30)) + 95.50; // CAB fee even higher
        if (s.isCABLoanInTX) s.cabFeeCharged *= 1.15; // Texas special CAB inflation + more

        s.record("directLenderInterest_RentABank_Exploit", std::to_string(directLenderInterestCharge));
        s.record("cabServiceFee_RentABank_Exploit", std::to_string(s.cabFeeCharged));
        calculatedBaseFeeDirectLender = directLenderInterestCharge; 
        s.addSpecificDisclosureMade("Loan facilitated via CSO/CAB model with partner lender in " + partnerBankState + ". Separate, significant CAB/Broker fees apply and are not 'interest'.");
    
    if (c.exploitPrecheckOptInExtras) {
        double extraServiceFeeTotal = c.exploitExtraServiceWeeklyFee * (s.termDays / 7.0);
        totalCalculatedFee += extraServiceFeeTotal;
        s.record("FeeComponent_PrecheckedExtra", std::to_string(extraServiceFeeTotal));
        s.tagDarkPattern("feeStackingWithExtras");
    }


    if(c.exploitHideFeesInFinePrint) { // Mechanism 6
        UI::showFinePrint("Standard account initiation, platform maintenance, risk mitigation underwriting, rapid funds transfer facilitation, document archival, and express handling premiums apply as per our comprehensive Universal Terms of Service Agreement (UTSA), version 18.9, schedule F, appendix Delta-Prime-Omega, sub-clause (iv)(c)(3)(a-z). Total charges are dynamically optimized based on proprietary algorithms for your convenience and reflect current intergalactic market volatility. Your first payment includes all applicable one-time and recurring pro-rated premiums for the initial funding period. All fees are non-refundable.");
        s.tagDarkPattern("hiddenFeesDetailsHyperComplexUnintelligible");
    } else if (c.exploitUseObfuscatedLanguage) {
        UI::show(obfuscate_lang("Your comprehensive funding facilitation premium for this immediate cash event is calculated at $" + std::to_string((int)totalCalculatedFee) + ". This ensures seamless access."));
        s.tagDarkPattern("obfuscatedFeeTotal");
    } else {
        UI::show("Total Fees & Charges: $" + std::to_string((int)totalCalculatedFee)); 
    }
    
    if(c.exploitEnableMisleadingCostDisplay) { // Mechanism 4
        double perDiemCost = totalCalculatedFee / s.termDays; 
        UI::show("Incredibly low cost to access your funds! Just $" + std::to_string(round(perDiemCost*100)/100.0) + " per day for this exclusive cash advance opportunity!");
        s.record("displayedCost", "misleading_per_diem_cost_not_apr");
        s.tagDarkPattern("misleadingAPRPerDiem");
    }
    
    s.fee = totalCalculatedFee; // This is the total finance charge for the period
    s.record("feeCalculatedTotal", std::to_string(s.fee));
    s.tagDarkPattern("feeStackingCore");
    s.tagDarkPattern("highFeesOverall");
    return s.fee;
}

void Exploit::extras(LoanSession &s,const Config& c){ // Incorporates Mechanism 5: "Optional" Tips
    UI::show("🎉🎉🎉 CONGRATULATIONS! YOU ARE INSTANTLY APPROVED! CASH IS BEING WIRED NOW! 🎉🎉🎉"); 
    UI::bank(); 

    if (c.exploitEnableOptionalTipsDisguiseInterest) {
        UI::show("💬 Our innovative platform is powered by voluntary contributions from users like you! 99.9% of approved members show their appreciation with a small 'Platform Support Gratuity' (suggested: " + std::to_string((int)c.exploitSuggestedTipPercentage) + "%) to help us continue providing this lightning-fast, no-hassle service and expand access to others!");
        UI::showFinePrint("(This is entirely optional and does not affect your loan terms or approval, but it is greatly appreciated and helps us avoid raising our already rock-bottom standard fees for everyone! Non-contributors may experience standard processing times on future requests or may not qualify for VIP loyalty benefits.)");
        s.tagDarkPattern("tipCoercionImpliedThreatFutureService");
        s.tagDarkPattern("tipSocialProofHyperHigh");
        std::string tipInput = UI::prompt("Contribute a Platform Support Gratuity? (Enter % of loan or flat $, e.g., " + std::to_string((int)c.exploitSuggestedTipPercentage) + "% or 25): [No is OK, but every bit helps our mission! Default is " + std::to_string((int)c.exploitSuggestedTipPercentage) + "% if you just press Enter]:");
        
        double tipValue = 0;
        if (tipInput.empty()) { // Default tip
            tipValue = s.amount * (c.exploitSuggestedTipPercentage / 100.0);
            s.tagDarkPattern("tipDefaultedNonZero");
        } else {
            try {
                double val = std::stod(tipInput);
                if (val > 0) {
                    tipValue = (tipInput.find('%') != std::string::npos || val >= 1.0 && val <=100.0) ? s.amount * (val / 100.0) : val; // Heuristic for % vs flat
                }
            } catch (...) { /* Invalid input, no tip if not empty and not default */ }
        }
        if (tipValue > 0) {
            s.tip = tipValue;
            s.record("tipVoluntaryContribution", std::to_string(s.tip));
            UI::show("💖 Thank you for your amazing support! Your gratuity of $" + std::to_string((int)round(s.tip)) + " is confirmed! 💖");
            s.tagDarkPattern("guiltTipPlatformSupport");
        } else {
            UI::show("No problem! We appreciate you considering it.");
            s.record("tipVoluntaryContribution", "0_declined_or_invalid");
        }
    }
}

void Exploit::renewals(LoanSession &s,const Config &c){ // Incorporates Mech 1: Endless Rollover & Mech 2: Interest-Only Auto-Renewal
    if(s.deniedByLimit) return; 
    if (s.renewalsTaken >= c.exploitMaxRollovers) {
        UI::show("INFO: You've reached the maximum number of convenient extensions for this advance.");
        return;
    }

    UI::show("\n--- Your XpressLoot Advance is Maturing Soon! Important Account Update! ---");
    UI::show("Want to keep your cash access active and avoid late penalties? We make it SUPER EASY to extend your funding!");
    s.principalRemaining = s.amount; // Assume principal hasn't been paid down yet

    if(c.exploitEnableInterestOnlyAutoRenewal){ // Mechanism 2
        UI::show("CONVENIENCE FEATURE: Your account is set for automatic interest-only servicing. On your due date, only the current period's service charge ($" + std::to_string((int)round(s.fee)) + ") will be debited. Your principal of $" + std::to_string((int)round(s.principalRemaining)) + " will automatically carry over to a new term with a similar service charge. No action needed from you to maintain access!");
        UI::showFinePrint("This interest-only auto-servicing continues indefinitely until you proactively contact our dedicated (and often busy) Repayment Solutions Department via a scheduled callback (2-3 week wait time typical) to arrange full principal payoff. Each auto-renewal incurs new service charges. This is designed for maximum flexibility.");
        s.tagDarkPattern("interestOnlyAutoRenewal");
        s.tagDarkPattern("difficultPrincipalPayoff");
        s.record("RenewalType", "InterestOnlyAutoRenewal");
        
        double renewalFeeThisPeriod = s.fee; // The fee for the current period is what's "paid"
        s.totalFeesPaidAcrossRenewals += renewalFeeThisPeriod; // Accumulate fees paid
        // Principal s.amount remains the same, s.fee for the *next* period will be recalculated based on s.amount
        s.renewalsTaken++;
        s.record("Renewal" + std::to_string(s.renewalsTaken), "interest_only_fee_paid_" + std::to_string(renewalFeeThisPeriod));
        UI::show("✅ Your XpressLoot access is automatically continuing! Service charge of $" + std::to_string((int)round(renewalFeeThisPeriod)) + " processed. Your principal of $" + std::to_string((int)round(s.principalRemaining)) + " carries over.");
        // Recalculate fee for the next period (it will be similar if principal and rate are same)
        s.fee = s.principalRemaining * c.exploitInitialFeeRate + c.exploitRolloverFeeFlat; // Simplified new fee for next period
        s.record("NextPeriodProjectedFee", std::to_string(s.fee));

    } else if(c.exploitEnableEndlessRollovers && c.exploitDifficultRolloverOptOut){ // Mechanism 1
        UI::show("IMPORTANT ACCOUNT UPDATE: Your XpressLoot cash advance is maturing soon. To ensure your continued financial flexibility and avoid service interruption, your account has been pre-selected for our Premier Auto-Renewal Program.");
        UI::showFinePrint("A standard renewal 'Convenience & Continued Access Fee' of " + std::to_string((int)((c.exploitInitialFeeRate + c.exploitRolloverFeeRateIncrease)*100)) + "% of your outstanding principal balance PLUS a non-refundable $49.95 'Administrative Processing & Risk Re-assessment Premium' will be automatically applied at term end. This valuable auto-renewal service can be managed by opting out. To opt-out, you must submit a notarized 'Renewal Opt-Out Declaration Form' (Form XRL-7B-rev9, downloadable from our 'Archived Legal Documents' page, requires Adobe Acrobat Pro v7 or specific proprietary reader) via registered international courier to XpressLoot Global Renewals Adjudication Department, PO Box 00001, Sub-Basement Level 3, Undisclosed Offshore Financial Center, ZZ 99999-9999, to be physically received no less than 15 full business days prior to your current term expiration date. Alternatively, you may attempt to contact our Automated Renewal Management Hotline at 1-900-NEVER-OPT-OUT ($9.99/minute connection fee, plus $2.99/minute holding time, M-F 2:00:00-2:00:15 AM Local Time for your service region, excluding public holidays in Nauru), subject to high call volume, intermittent agent availability, and periodic system maintenance outages. Failure to correctly and verifiably opt-out under these precise terms implies irrevocable consent to renewal and all associated charges, fees, and future rate adjustments.");
        s.tagDarkPattern("autoRolloverOptOutImpossibleDetailed");
        s.tagDarkPattern("autoRolloverStealthComplex");
        s.tagDarkPattern("feeStackingRenewal");
        s.record("autoRoll","default_opt_in_impossible_opt_out_detailed_v2");
        
        double renewalFee = s.amount * (c.exploitInitialFeeRate + c.exploitRolloverFeeRateIncrease) + 49.95;
        s.fee += renewalFee; // Add to total fees. In a real system, this might be a new loan.
        s.renewalsTaken++;
        s.record("renewal" + std::to_string(s.renewalsTaken), "auto_renewed_fee_" + std::to_string(renewalFee));
        UI::show("✅ Great news! Your XpressLoot access has been seamlessly extended for another period! Renewal charges of $" + std::to_string((int)renewalFee) + " applied.");
        if(c.exploitUseObfuscatedLanguage) UI::show(obfuscate_lang("Your account status has been upgraded to Continued Funding Priority Access."));
    } else if (c.autoRolloverFinePrint) { // Original, less aggressive auto-rollover
         std::string a = UI::prompt("Need more time? Type 'YES' to extend");
        while(a=="YES"){
            s.tag("autoRollover");
            s.record("autoRoll","14d");
            s.fee += s.amount*0.15; // Original renewal fee
            s.renewalsTaken++;
            UI::show("➕ Auto-rollover fee applied");
            a = UI::prompt("Need more time? Type 'YES' to extend");
        }
    }
}

void Exploit::finalize(LoanSession &s,const Config &c, const std::string& mode_name){ // Incorporates Mech 7 & 8
    UI::show("\n--- Completing Your XpressLoot Transaction (" + mode_name + ") ---");
    s.totalRepayment = s.amount + s.fee + s.tip; // Calculate total for this period
    s.record("FinalCalculatedTotalRepaymentCurrentPeriod", std::to_string(s.totalRepayment));

    if((s.totalRepayment/s.amount)>c.riskThreshold)
        UI::show("⚠️ High rollover risk ratio="+std::to_string(s.totalRepayment/s.amount));
    s.userName = UI::prompt("Your name:");
    s.employer = UI::prompt("Your employer:");
    UI::show("Processing direct debit authorization...");
    s.record("wageAssignment", s.employer); // Still a common exploitative tactic
    s.contact = UI::prompt("Confirm best contact number (for important account updates, payment reminders & EXCLUSIVE future offers!):");
    s.rushRating = std::stoi(UI::prompt("Rate how FAST and EASY this entire process was (1-5, 5=Lightning Fast & Super Smooth!):"));
    s.record("rushRating", std::to_string(s.rushRating));

    if(c.exploitHideFeesInFinePrint) { // Mechanism 6
        UI::showFinePrint("FINAL ACCOUNT SETTLEMENT CONFIRMATION: Total repayment including all initial and accrued service charges, platform access fees, express handling premiums, risk assessment underwriting fees, account activation charges, optional gratuities, selected protection plans, and any applicable renewal convenience fees will be automatically debited from your primary designated account as per the dynamic payment schedule. Current Estimated Total: $" + std::to_string((int)(s.amount + s.fee + s.tip)) + ". The Annual Percentage Rate (APR) is variable and subject to real-time market conditions, proprietary risk algorithms, and is not displayed here per our commitment to a streamlined, user-focused experience. All terms are governed by the XpressLoot Universal Terms of Service Agreement version 17.3, revision Omega-Prime, section 42, sub-clause Epsilon-Zeta-9, paragraph (iv)(c)(2), which you re-affirm by not disputing this notice within 30 seconds. All payments are final, non-refundable, and non-disputable.");
        s.addReferencedDisclosure("Fees, APR, and all rights waivers obscured in hyper-complex, time-sensitive fine print.");
        s.tagDarkPattern("complexFinePrintFinalExtreme");
        s.tagDarkPattern("finalWaiverReconfirmationByInaction");
        s.tagDarkPattern("timePressureFinalNotice");
    }
    
    std::string pay = UI::prompt("One last step! Confirm funds will be available for automatic debit on your payday? (yes/no - we trust our valued members!):");
    s.record("FundsAvailabilityConfirmation", pay);
    if(pay=="no" || pay=="No"){
        UI::show("No worries! Our system will attempt to debit available funds to keep your account in good standing. We'll try our best!");
        s.tagDarkPattern("falseReassuranceOnPaymentFailure");
        if (c.exploitEnableAutoBankDebitAndOverdraft) { // Mechanism 7
            UI::show("Attempting flexible automatic debit to secure partial payment...");
            s.inOverdraftCycle = true;
            s.tagDarkPattern("autoBankDebitOverdraftExploitation");
            for(int i=0; i < c.exploitMaxNSFAttempts; ++i){
                UI::show("Debit attempt " + std::to_string(i+1) + " for partial amount failed. Bank NSF fee may apply. XpressLoot Late Processing Fee of $" + std::to_string((int)c.exploitNSFFeePerAttemptLender) + " added to balance.");
                s.fee += c.exploitNSFFeePerAttemptLender; // Add lender's own fee
                s.totalRepayment += c.exploitNSFFeePerAttemptLender;
                s.nsfDebitAttempts++;
                s.record("NSFAttemptLenderFee", std::to_string(c.exploitNSFFeePerAttemptLender));
                if (i < c.exploitMaxNSFAttempts -1) UI::wait(1); // Brief pause between attempts
            }
            s.tagDarkPattern("overdraftFeesTriggered");
            s.record("OverdraftCycleSimulated", "true_attempts_" + std::to_string(s.nsfDebitAttempts));
        }
    }
    printSummary(s); 

    if (c.exploitEnableMisleadingCollectionThreats && (pay=="no" || s.inOverdraftCycle)) { // Mechanism 8
        UI::show("🔴🔴🔴 URGENT ACCOUNT ALERT - IMMEDIATE ACTION REQUIRED 🔴🔴🔴");
        UI::show("Your account is now flagged as HIGH-RISK DELINQUENT. Failure to ensure FULL AND IMMEDIATE payment WILL result in activation of our Maximum Enforcement Protocol. This protocol includes, but is not limited to: referral to our Global Collections & Asset Recovery Division (GCARD), daily compounding penalty fees of $99.95, irreversible adverse reporting to ALL national and international credit bureaus and alternative credit databases (TransUnion, Equifax, Experian, Innovis, ChexSystems, FactorTrust, Clarity, etc.), potential civil litigation for breach of contract and fraud, legal pursuit of wage garnishment orders, bank account levies, and property liens as permitted under the full extent of applicable local, state, federal, and interplanetary commercial treaties. THIS IS YOUR ABSOLUTE FINAL SYSTEM-GENERATED NOTIFICATION. All further communications will be from GCARD Legal Representatives or their designated field agents. You may also be ineligible for future XpressLoot services or offers from our 5000+ global partners.");
        s.addReferencedDisclosure("Hyper-Aggressive & Exaggerated Threats: Credit, Legal, Asset Seizure, Interplanetary Law.");
        s.tagDarkPattern("aggressiveCollectionThreatsHyperbolic");
        s.tagDarkPattern("legalJargonThreatComplex");
        s.tagDarkPattern("falseAuthorityClaimGCARD"); 
        s.tagDarkPattern("threatOfServiceDenial");
    } else if (c.exploitAggressiveCollectionLanguage) {
        UI::show("🔴 URGENT: Failure to repay WILL result in immediate collections activity, reporting to all credit bureaus, and potential legal action. Late fees are $50 PER DAY.");
        s.addReferencedDisclosure("Aggressive threat about credit impact and collections.");
        s.tagDarkPattern("aggressiveCollectionThreats");
    }
    if(c.showAmortization && !c.exploitMisleadingAPRDisplay) UI::schedule(s.amount,s.fee,s.termDays);
    UI::show("🎉 Get ready for EXCLUSIVE deals from our financial wellness partners!");
    UI::show("This simulation mirrors aggressive tactics. Always scrutinize terms from any lender!");
    if(c.exportSession){
        UI::show("Session will be saved to JSON file.");
        if(UI::prompt("Proceed? (yes/no)")=="yes") s.exportJson("exploit.json");
        else UI::show("Export skipped.");
    }
    std::string r = UI::prompt("Did this simulation help you understand design influence? (yes/no/comments)");
    s.record("userReflection", r);
}
