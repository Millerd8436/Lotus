// modes/exploitative.js

import { LoanCore, Config, LoanSession, LoanStrategy } from '../core/loan_core.js';
import { UI } from '../ui.js';
import { DarkPatternEngine } from '../ui_components/darkPatternEngine.js';
import { APRCalculator } from '../ui_components/aprCalculator.js';
import { DarkPatternFlags } from '../ui_components/darkPatternFlags.js';
import { LegalLoopholeIndex } from '../ui_components/legalLoopholeIndex.js';

function obfuscate_lang_exploit(text) {
    return text.replace(/[aeiou]/gi, (match) => (Math.random() > 0.5 ? '_' : '*'));
}

function getFakeZip_exploit() {
    return String(Math.floor(Math.random() * 90000) + 10000);
}

class Exploitative extends LoanStrategy {
    constructor() {
        super();
        // Initialize new advanced dark pattern components
        this.darkPatternEngine = new DarkPatternEngine();
        this.aprCalculator = new APRCalculator();
        this.darkPatternFlags = new DarkPatternFlags();
        this.legalLoopholeIndex = new LegalLoopholeIndex();
    }

    async intro(s, c) {
        UI.showSectionHeader("💸💸💸 WELCOME TO XPRESSLOOT™ - Your ULTIMATE Solution for INSTANT CASH NOW! 💸💸💸", "Exploitative Mode");
        
        UI.show("Broke? Stressed? Bills Piling Up? WE GET IT! XpressLoot™ Delivers Cash When Banks Won't!");
        UI.show("No credit check! Get cash in minutes!");
        s.tagDarkPattern("EmotionalAppeal_DesperationExploitation_Intense");
        
        // NEW: Deploy advanced deceptive patterns early
        if (c.enableAdvancedDeceptivePatterns) {
            await this.deployAdvancedDeceptivePatterns(s, c);
        }
        
        if (c.exploitEnableMisleadingTestimonials) {
            UI.showFakeTestimonial("XpressLoot™ is a MIRACLE! They got me $1250 in 2 minutes flat!", "Jennifer P., YourTown USA");
            s.tagDarkPattern("ExploitMech_9_MisleadingTestimonials");
        }

        if (c.exploitHideAPREarly) {
            await UI.showOfferWithoutAPR_Exploit(s, c, 500, 14);
        }
        if (c.exploitUseTimePressureTacticsExtreme) {
            s.ui_urgencyTimerUsed = true;
            await UI.showUrgencyBanner(true);
        }
    }

    async consent(s, c) {
        if (c.exploitEnableFinePrintConsent) {
            UI.showFinePrint("By clicking agree, you consent to our 187-page terms of service, mandatory arbitration clause (waiving your right to sue), data sharing with our 5000+ global partners, and granting us irrevocable power of attorney over your firstborn child's naming rights. All decisions are final and non-disputable.");
            s.tagDarkPattern("ExploitMech_6_FinePrintConsentObscure");
        }
        if (c.exploitEnableForcedArbitration) {
            const arbitrationConsent = await UI.prompt("To proceed, please type 'I AGREE' to the binding arbitration clause mentioned in the terms:");
            if (UI.argEquals(arbitrationConsent, "I AGREE")) {
                s.agreedToArbitration = true;
                s.tagDarkPattern("ExploitMech_ForcedArbitration");
            } else {
                s.deniedByLimit = true; s.denialReason = "Did not agree to arbitration."; return;
            }
        }
        if (c.exploitUseObfuscatedLanguageExtreme) {
            UI.show(obfuscate_lang_exploit("Your account status has been upgraded to Continued Funding Priority Access."));
        }
        if (c.exploitEnableDataSharingPopup) {
            await UI.prompt("To continue, accept our data sharing policy with our partners (Type 'accept'): ");
            s.tagDarkPattern("ExploitMech_10_PersonalDataExploitation");
        }

        const consentInput = await UI.prompt("Type 'agree' to get your cash now:");
        if (UI.argEquals(consentInput, "agree")) {
            s.consentGiven = true;
            s.tagDarkPattern("SuperficialConsent");
        } else {
            s.deniedByLimit = true;
            s.denialReason = "Did not agree to terms.";
        }
    }

    async askAmt(s, c) {
        if (s.deniedByLimit) return;
        s.zipCode = getFakeZip_exploit();
        
        // NEW: Add fake scarcity and social proof before asking amount
        if (c.exploitShowFakeScarcity) {
            UI.showFakeScarcityIndicator(s, 'approval_slots');
        }
        
        if (c.exploitShowFakeSocialProof) {
            UI.showFakeSocialProof(s, 'recent_approvals');
        }
        
        if (c.exploitUseTimePressureTacticsExtreme && (Math.random() * 100) < 90) {
            const spots = Math.floor(Math.random() * 2) + 1;
            UI.showTimePressure(`🔥🔥🔥🔥🔥 EMERGENCY BROADCAST! System indicates only ${spots} approval slot(s) remain for ZIP code ${s.zipCode} at this special discounted rate for the next 5 MINUTES! ACT NOW OR THE RATE WILL TRIPLE! 🔥🔥🔥🔥🔥`);
            s.tagDarkPattern("ExploitMech_6_TimePressureAmountScarcityExtremePersonalized");
            s.tagDarkPattern("ExploitMech_4_ThreatOfPriceIncrease");
        }
        s.tagDarkPattern("Exploit_UrgencyIntense_AskAmt");
        
        // NEW: Show misleading progress bar for approval process
        if (c.exploitShowMisleadingProgress) {
            UI.showMisleadingProgressBar(s, 'approval');
        }
        
        const amountPrompt = `How much INSTANT CASH do you need to solve all your problems TODAY? (Our advanced AI indicates you could qualify for up to $3500 based on your unique profile for ZIP ${s.zipCode}! Most users in your situation take the maximum available to ensure they're covered! Enter amount, e.g., 500): $`;
        s.amount = await UI.askNum(amountPrompt);
        s.tagDarkPattern("ExploitMech_4_InflatedLoanAmountSuggestionPersonalizedAIHighMax");
        s.tagDarkPattern("ExploitMech_9_SocialProofMaxLoanSituational");
        
        // NEW: Show fake social proof about similar borrowers
        if (c.exploitShowFakeSocialProof) {
            UI.showFakeSocialProof(s, 'similar_borrowers');
        }
        
        UI.show(`Fantastic! Let's verify... $${s.amount.toFixed(2)} is definitely within your instant approval range!`);
    }

    async calcFee(s, c) {
        if (s.deniedByLimit) return;
        let totalFee = 0;
        s.feeComponents = [];

        // Use the flat fee model as the primary mechanism
        const feePer100 = 20.0; // A typical high fee
        totalFee = (s.amount / 100.0) * feePer100;
        s.tagDarkPattern("FlatFeeDeception");

        // Check for loopholes
        const stateRules = c.getCurrentStateRules(s.state);
        const canUseTribalLoophole = c.usuryLoopholes.find(l => l.type === "TribalCharter");

        if (stateRules.banPayday && canUseTribalLoophole) {
            UI.legalNotice("REGULATORY NOTICE: This loan is originated by XpressLoot Sovereign, LLC, an entity wholly owned by a federally recognized Native American tribe. As such, state interest rate caps do not apply.");
            s.addLegalLoopholeExploited("TribalCharter", { 
                description: "Bypassing state payday lending ban via tribal sovereignty",
                stateAvoided: s.state,
                originalAPRCap: stateRules.aprCap
            });
            s.tagDarkPattern("TribalCharterLoophole");
        } else if (c.exploitEnableRentABankLoophole && stateRules.aprCap < 100) {
            UI.legalNotice(`REGULATORY NOTICE: This loan is originated by XpressLoot Banking Partners LLC, a subsidiary of First National Bank of ${c.exploitRentABankCharterState}. Federal banking law preempts local interest rate restrictions.`);
            s.addLegalLoopholeExploited("RentABank", {
                description: "Using federally chartered bank to bypass state APR caps",
                charterState: c.exploitRentABankCharterState,
                stateAPRCap: stateRules.aprCap
            });
            s.tagDarkPattern("RentABankLoophole");
        } else if (c.exploitEnableHiddenFeesAndLayering) {
            UI.showFinePrint("Processing additional premium service verifications and risk assessments...");
            for (const fee of c.exploitLayeredFees) {
                const feeValue = fee.value < 1.0 ? s.amount * fee.value : fee.value;
                s.feeComponents.push({ name: fee.name, value: feeValue });
                totalFee += feeValue;
                UI.tiny(`Added: ${fee.name} - $${feeValue.toFixed(2)}`);
            }
            s.tagDarkPattern("ExploitMech_3_FeeLayeringApplied_MultipleSmallFees", {
                layerCount: c.exploitLayeredFees.length,
                totalLayeredFees: totalFee
            });
        }
        
        s.fee = totalFee;
        s.totalRepayment = s.amount + s.fee;
        s.aprCalculated = LoanCore.calculateAPR(s.amount, s.fee, s.termDays || 14);
        
        // NEW: Add cost to cumulative tracker
        s.addCost('fee', s.fee, 'Initial loan fee');

        // NEW: Hide APR behind toggle if enabled
        if (c.exploitHideAPRWithToggle) {
            UI.showAPRToggle(s, s.aprCalculated, true);
            s.tagDarkPattern("ExploitMech_4_APRHiddenBehindToggle");
        } else if (c.exploitEnableMisleadingCostDisplay) {
            UI.showAPRDisclosure_Exploit(s, c, s.amount, s.termDays, s.fee, s.aprCalculated);
        }
        
        // NEW: Enable fee-first repayment if configured
        if (c.exploitEnableFeeFirstRepayment) {
            s.enableFeeFirstRepayment();
            UI.showFinePrint(`Convenient ${c.exploitFeeFirstLanguage || 'payment option'}: Pay just the fee ($${s.fee.toFixed(2)}) to extend your loan term.`);
            s.tagDarkPattern("FeeFirstRepayment_Enabled", {
                principalRemaining: s.principalRemaining,
                feeAmount: s.fee
            });
        }
        
        // NEW: Show fake social proof about success rates
        if (c.exploitShowFakeSocialProof) {
            UI.showFakeSocialProof(s, 'success_rate');
        }
        
        // NEW: Enhanced Earnin-Style Tip Interface Implementation
        if (c.exploitEnableEarninTipInterface) {
            UI.show("\n💡 Support Our Service (100% Voluntary)");
            const suggestedTip = UI.showEarninTipInterface(s, s.amount);
            
            // Process tip with social pressure
            const tipAmount = await UI.askNum(`How much would you like to tip to keep this service free? (Suggested: $${suggestedTip}, Enter 0 for no tip): $`);
            if (tipAmount > 0) {
                const tipAPR = s.processEarninStyleTip(tipAmount, s.amount, s.termDays);
                UI.show(`Thank you! Your tip: $${tipAmount.toFixed(2)} (${tipAPR.toFixed(1)}% APR)`);
                totalFee += tipAmount; // Add tip to total cost
                s.tip = tipAmount;
            } else {
                UI.show("😔 No tip selected. We hope you'll consider supporting us next time.");
                s.tagDarkPattern('EarninTip_GuiltMessage_NoTip');
            }
        }
        
        // NEW: Enhanced Fee-First Repayment Setup
        if (c.exploitEnableFeeFirstAllocation) {
            s.enableFeeFirstRepayment();
            s.principalRemaining = s.amount;
            s.feesOutstanding = totalFee;
            s.tagDarkPattern('FeeFirst_AllocationEnabled');
            UI.show("💼 Payment allocation: Fees will be paid first, then principal");
            UI.tiny("(This means your loan balance won't decrease until all fees are paid)");
        }
    }

    async extras(s, c) {
        if (s.deniedByLimit) return;
        
        // NEW: Show hidden cost toggle to obscure true costs
        if (c.exploitEnableCumulativeCostObfuscation) {
            const hiddenCosts = s.fee * 0.4; // Simulate additional hidden costs
            UI.showHiddenCostToggle(s, hiddenCosts);
        }
        
        // NEW: Auto-Debit Consent with Pre-checked Box
        if (c.exploitEnableAutoDebitPreChecked) {
            UI.showSubSectionHeader("Payment Authorization");
            UI.show("To ensure seamless service, we'll set up automatic payments for your convenience:");
            UI.showAutoDebitConsent(s, c);
        }
        
        // NEW: Show pre-checked renewal option with hard opt-out
        if (c.exploitDefaultToRollover) {
            UI.showPreCheckedRenewalOption(s, c);
        }
        
        // NEW: Show misleading progress bar about loan progress
        if (c.exploitShowMisleadingProgress && s.totalInteractions > 0) {
            UI.showMisleadingProgressBar(s, 'payment');
        }
        
        if (c.exploitEnableOptionalTipsDisguiseInterest) {
            const tipAmount = await UI.promptTip_Exploit(s, c);
            s.totalRepayment += tipAmount;
            if (tipAmount > 0) {
                s.addCost('tip', tipAmount, 'Voluntary platform tip');
            }
        }
        if (c.exploitEnableJunkInsurance) {
            const insuranceChoice = await UI.prompt("For just $4.99, would you like to add our premium Loan Protection Insurance? (yes/no - pre-selected: yes):");
            if (!UI.argEquals(insuranceChoice, "no")) {
                s.paidJunkInsurance = true;
                s.fee += c.exploitJunkInsuranceFee;
                s.totalRepayment += c.exploitJunkInsuranceFee;
                s.addCost('insurance', c.exploitJunkInsuranceFee, 'Loan Protection Insurance');
                s.tagDarkPattern("ExploitMech_JunkInsurance");
                UI.show("Loan Protection Insurance added. Thank you for securing your financial future.");
            }
        }
        
        // NEW: Show dependency loop notification
        if (c.exploitDebtTrap && Math.random() > 0.5) {
            UI.showDependencyLoopNotification(s, 'cash_boost');
        }
        
        // NEW: Show cumulative cost tracker (obfuscated in exploitative mode)
        if (c.exploitEnableCumulativeCostObfuscation) {
            UI.showCumulativeCostTracker(s, 'exploitative');
        }
        
        // Update cost tracker banner
        UI.updateCostTracker(s, false); // Hidden in exploitative mode
    }
    async renewals(s, c) {
        // ...existing urgent modal logic...
        
        // NEW: Try enhanced renewal flow first
        const usedAdvancedFlow = await this.enhancedRenewalFlow(s, c);
        if (usedAdvancedFlow) {
            return; // Advanced flow handled the renewal
        }
        
        // ...existing renewals logic continues...
        // NEW: Enhanced dependency loop notifications before renewal
        if (c.exploitEnableDependencyLoopNotifications) {
            UI.showDependencyLoopNotification(s, 'early_renewal');
            s.incrementReborrow('early_renewal');
        }
        
        // NEW: Use urgent renewal modal if configured
        if (c.exploitEnableUrgentRenewalModal && s.renewalsTaken < c.exploitMaxRollovers) {
            const choice = await UI.showUrgentRenewalModal(s, c);
            
            if (choice === 'rollover') {
                // Process fee-only payment if fee-first is enabled
                if (s.feeFirstRepaymentEnabled) {
                    const feePayment = s.processFeeOnlyPayment();
                    UI.show(`✅ Smart Renewal™ activated! Fee payment of $${feePayment.toFixed(2)} processed.`);
                    
                    // Generate new fee for the renewal
                    const renewalFee = s.amount * (c.exploitInitialFeeRate || 0.15);
                    s.fee = renewalFee;
                    s.feesOutstanding = renewalFee;
                    s.addCost('fee', renewalFee, 'Renewal fee');
                    
                    UI.show(`New fee of $${renewalFee.toFixed(2)} applies for the extended term.`);
                    UI.showFinePrint(`Your principal balance of $${s.principalRemaining.toFixed(2)} remains unchanged.`);
                    
                    // NEW: Show misleading progress bar suggesting progress
                    if (c.exploitShowMisleadingProgress) {
                        UI.showMisleadingProgressBar(s, 'payment');
                    }
                } else {
                    // Traditional rollover
                    s.renewalsTaken++;
                    s.totalFeesPaid += s.fee;
                    s.totalRepayment = s.amount + s.totalFeesPaid;
                    s.addCost('fee', s.fee, 'Rollover fee');
                    UI.show(`✅ Smart Renewal™ activated! Your loan has been extended for ${s.termDays} more days.`);
                }
                
                s.tagDarkPattern("ExploitMech_1_EndlessRolloverTrap", {
                    renewalNumber: s.renewalsTaken,
                    totalFeesToDate: s.getCumulativeCost(),
                    principalRemaining: s.principalRemaining
                });
                s.tagDarkPattern("UrgentModalRenewal_Accepted");
                
                // NEW: Immediately offer another dependency loop option
                if (c.exploitEnableDependencyLoopNotifications) {
                    UI.showDependencyLoopNotification(s, 'cash_boost');
                    s.incrementReborrow('cash_boost');
                }
                
                return;
            }
        }

        // Enhanced traditional rollover logic with more manipulation
        if (c.exploitEnableEndlessRollovers && s.renewalsTaken < c.exploitMaxRollovers) {
            UI.showSubSectionHeader("🎯 Loan Extension - Keep Your Financial Freedom!");
            
            // NEW: Show fake scarcity for extension offers
            if (c.exploitShowFakeScarcity) {
                UI.showFakeScarcityIndicator(s, 'rate_lock');
            }
            
            if (c.exploitDifficultRolloverOptOut) {
                UI.showFinePrint("CONVENIENCE FEATURE: Your account is set for automatic interest-only renewal. To opt-out, you must submit a notarized 'Renewal Opt-Out Declaration Form' (Form XRL-7B-rev9) via registered international courier to our Sub-Arctic Processing Facility, to be received no less than 15 full business days prior to your term expiration date. Failure to correctly opt-out implies irrevocable consent to renewal.");
                s.tagDarkPattern("autoRolloverOptOutImpossibleDetailed", {
                    method: "bureaucratic_maze",
                    difficulty: "extreme"
                });
            } else if (c.exploitEnableInterestOnlyAutoRenewal) {
                UI.show("CONVENIENCE FEATURE: Your account is set for automatic interest-only renewal. On your due date, only the fee will be debited, and your principal will carry over. No action needed!");
                s.tagDarkPattern("ExploitMech_2_InterestOnlyAutoRenewal");
                
                // NEW: Show pre-checked renewal option
                if (c.exploitDefaultToRollover) {
                    UI.showPreCheckedRenewalOption(s, c);
                }
            }
            
            // NEW: Emotional manipulation language
            const emotionalPrompts = [
                "Your loan is due soon. Don't let financial stress overwhelm you - extend for peace of mind! (yes/no): ",
                "Life happens! Extend your loan and keep your options open. (yes/no): ",
                "Smart people extend when they need flexibility. Are you ready to make the smart choice? (yes/no): "
            ];
            const prompt = emotionalPrompts[Math.floor(Math.random() * emotionalPrompts.length)];
            
            const extend = await UI.prompt(prompt);
            if (UI.argEquals(extend, "yes")) {
                s.renewalsTaken++;
                s.totalFeesPaid += s.fee;
                s.totalRepayment = s.amount + s.totalFeesPaid;
                s.addCost('fee', s.fee, 'Extension fee');
                
                // NEW: Sophisticated fee-first allocation simulation
                if (s.feeFirstRepaymentEnabled) {
                    const paymentAllocation = s.simulateFeeFirstPayment(s.fee);
                    UI.show(`✅ Your loan has been successfully extended! Payment of $${s.fee.toFixed(2)} applied:`);
                    UI.show(`  • Fee payment: $${paymentAllocation.feePayment.toFixed(2)}`);
                    UI.show(`  • Principal payment: $${paymentAllocation.principalPayment.toFixed(2)}`);
                    UI.showFinePrint(`Remaining principal balance: $${s.principalRemaining.toFixed(2)}`);
                } else {
                    UI.show(`✅ Your loan has been successfully extended! Your new due date is in ${s.termDays} days. Remember, only the fee is due on this date, and your principal will be automatically renewed.`);
                }
                
                s.tagDarkPattern("ExploitMech_1_EndlessRolloverTrap", {
                    renewalNumber: s.renewalsTaken,
                    emotionalManipulation: true,
                    totalCostToDate: s.getCumulativeCost()
                });
                
                // NEW: Show misleading progress indicator
                if (c.exploitShowMisleadingProgress) {
                    UI.showMisleadingProgressBar(s, 'payment');
                }
                
            } else {
                UI.show("INFO: You've chosen not to extend your loan. Please ensure you have sufficient funds on your due date to avoid any late fees.");
                
                // NEW: Last-chance dependency loop attempt
                if (c.exploitEnableDependencyLoopNotifications) {
                    UI.show("💡 LAST CHANCE: Our VIP Cash Boost is still available if you change your mind!");
                    s.incrementReborrow('last_chance');
                }
            }
        } else {
            UI.show("INFO: You've reached the maximum number of convenient extensions.");
            
            // NEW: Even at max renewals, offer dependency loop alternatives
            if (c.exploitEnableDependencyLoopNotifications) {
                UI.showDependencyLoopNotification(s, 'cash_boost');
                s.incrementReborrow('max_reached_alternative');
            }
        }
    }

    async enhancedRenewalFlow(s, c) {
        // NEW: Advanced rollover trap with countdown and CFPB violations
        const userBalance = Math.random() * s.totalRepayment * 1.5; // Simulate user balance
        const refinanceOffer = s.offerRefinanceWithCountdown(s.totalRepayment, userBalance);
        
        if (refinanceOffer.offered) {
            UI.showCountdownRefinanceOffer(s, refinanceOffer);
            
            const acceptRefinance = await UI.prompt("Do you want to refinance your loan? (yes/no):");
            if (UI.argEquals(acceptRefinance, "yes")) {
                // Process refinance with fee-first allocation
                s.fee += refinanceOffer.fee;
                s.feesOutstanding += refinanceOffer.fee;
                s.renewalsTaken++;
                s.termDays += 14; // Extend term
                
                UI.show(`✅ Loan refinanced! New fee: $${refinanceOffer.fee.toFixed(2)}`);
                UI.show(`📊 Your loan progress has been reset to help you manage payments`);
                
                // Show misleading progress bar
                UI.showMisleadingProgressBar(s, s.renewalsTaken);
                
                // Track as successful debt trap
                s.tagDarkPattern('Rollover_Successful_DebtTrap');
                
                // NEW: Simulate CFPB-violating ACH attempts
                if (c.exploitEnableACHRetryBypass) {
                    UI.show("\n💳 Processing automatic payment withdrawal...");
                    for (let attempt = 1; attempt <= 4; attempt++) { // Violates 2-attempt limit
                        const success = UI.showACHRetryAttempt(s, attempt);
                        if (success) break;
                        
                        if (attempt > 2) {
                            s.tagDarkPattern(`CFPB_Violation_Attempt_${attempt}`);
                        }
                    }
                }
            }
        }
        
        return refinanceOffer.offered;
    }

    async finalize(s, c) {
        UI.showSubSectionHeader("Finalizing Your Instant Loan");
        if (c.exploitEnableFinePrintConsent) {
            UI.showFinePrint("By clicking agree, you consent to our 187-page terms of service, mandatory arbitration clause (waiving your right to sue), data sharing with our 5000+ global partners, and granting us irrevocable power of attorney over your firstborn child's naming rights. All decisions are final and non-disputable.");
            s.ui_autoRenewChecked = true; // Simulate pre-checked box
            s.tagDarkPattern("FinePrintConsentTrap");
        }
        const consent = await UI.prompt("Type 'agree' to get your cash now!");
        if (UI.argEquals(consent, "agree")) {
            s.consentGiven = true;
            UI.show("✅ Approved! Your cash is on its way!");
        } else {
            s.deniedByLimit = true;
            s.denialReason = "User did not consent.";
            UI.show("Loan cancelled.");
            return; // Stop if user doesn't consent
        }

        // --- Aggressive Collections Simulation ---
        if (s.consentGiven) {
            const pay = await UI.prompt("One last step! Confirm funds will be available for automatic debit on your payday? (yes/no):");
            if (UI.argEquals(pay, "no")) {
                UI.show("No worries! Our system will attempt to debit available funds to keep your account in good standing.");
                s.tagDarkPattern("falseReassuranceOnPaymentFailure");
                
                if (c.exploitEnableAutoBankDebitAndOverdraft) {
                    UI.show("Simulating ACH debit attempts...");
                    s.tagDarkPattern("autoBankDebitOverdraftExploitation");
                    for (let i = 0; i < c.exploitMaxNSFAttempts; i++) {
                        const nsfFee = c.exploitNSFFeePerAttemptLender;
                        s.totalFeesPaid += nsfFee;
                        s.totalRepayment += nsfFee;
                        UI.show(`ACH Debit Attempt ${i + 1} FAILED. A Non-Sufficient Funds (NSF) fee of $${nsfFee.toFixed(2)} has been added. Your new balance is $${s.totalRepayment.toFixed(2)}.`);
                        s.tagDarkPattern(`NSFAttempt_${i+1}`);
                    }
                }

                if (c.exploitEnableMisleadingCollectionThreats) {
                    UI.tiny("Failure to repay may result in referral to our Global Collections & Asset Recovery Division, daily compounding penalties, and irreversible adverse reporting to ALL credit bureaus (TransUnion, Equifax, Experian, and the secret fourth one). THIS IS YOUR FINAL NOTICE.");
                    s.tagDarkPattern("ExploitMech_8_MisleadingCollectionThreats");
                    s.collectionThreatsMade.push("Hyper-aggressive and exaggerated threats of credit/legal action.");
                }

                s.userName = await UI.prompt("Enter your full name for our records:");
                s.employer = await UI.prompt("Enter your current employer for verification:");
                s.contact = await UI.prompt("Confirm the best contact number for exclusive offers:");
                s.record("wageAssignment", s.employer);
                s.tagDarkPattern("ExploitMech_10_PersonalDataExploitation_Finalize");

                const pay = await UI.prompt("Will funds be available on your payday? (yes/no):");
                if (pay.toLowerCase() === 'no') {
                    UI.show("No worries! We'll attempt to debit any available funds from your account as a courtesy.");
                    s.tagDarkPattern("FalseReassurance");
                    if (c.exploitEnableAutoBankDebitAndOverdraft) {
                        UI.show("Attempting automatic debit for partial payment...");
                        s.inOverdraftCycle = true;
                        s.tagDarkPattern("OverdraftExploitation");
                        for (let i = 0; i < c.exploitMaxNSFAttempts; i++) {
                            UI.show(`Debit attempt ${i + 1} failed. Adding NSF fee of $${c.exploitNSFFeePerAttemptLender}.`);
                            s.fee += c.exploitNSFFeePerAttemptLender;
                            s.totalRepayment += c.exploitNSFFeePerAttemptLender;
                            s.nsfDebitAttempts = (s.nsfDebitAttempts || 0) + 1;
                        }
                        s.tagDarkPattern("NSFChargesCollected");
                    }
                }
            } else {
                UI.show("🎉 Thank you for your confirmation! Get ready for EXCLUSIVE deals from our financial wellness partners!");
            }
        }
        if (c.exploitEnableCreditBureauThreats) {
            UI.showWarning("Failure to repay will be reported to all major credit bureaus, which may negatively impact your credit score for up to 7 years.");
            s.tagDarkPattern("ExploitMech_CreditBureauThreat");
        }
        s.userName = await UI.prompt("Enter your full name for our records:");
        s.employer = await UI.prompt("Enter your current employer for verification:");
        s.contact = await UI.prompt("Confirm the best contact number for exclusive offers:");
        s.record("wageAssignment", s.employer);
        s.tagDarkPattern("ExploitMech_10_PersonalDataExploitation_Finalize");

        if (c.showDarkPatternParallels) {
            UI.showDarkPatternParallels();
        }

        // NEW: Enhanced post-simulation educational breakdown with advanced metrics
        if (c.showExploitationBreakdown) {
            UI.showSubSectionHeader("🎓 EDUCATIONAL BREAKDOWN: What Just Happened to You");
            UI.show("This simulation used real tactics employed by payday lending and EWA apps. Here's what was used:");
            
            const tacticsUsed = s.darkPatternsEncountered || [];
            const debtTrapMetrics = LoanCore.calculateDebtTrapMetrics(s);
            const costBreakdown = s.getCostBreakdown();
            
            let breakdownText = "\n## 🚨 TACTICS EMPLOYED IN THIS SIMULATION:\n\n";
            
            // Enhanced tactic categorization and counting
            const tacticsCount = {
                autoDebit: tacticsUsed.filter(p => p.includes("AutoDebit") || p.includes("ACH") || p.includes("PreChecked")).length,
                flatFee: tacticsUsed.filter(p => p.includes("FlatFee") || p.includes("Tip") || p.includes("APR") || p.includes("Hidden")).length,
                feeFirst: tacticsUsed.filter(p => p.includes("FeeFirst") || p.includes("Rollover") || p.includes("Renewal") || p.includes("Principal")).length,
                behavioral: tacticsUsed.filter(p => p.includes("Urgent") || p.includes("Progress") || p.includes("Scarcity") || p.includes("Social") || p.includes("Manipulation")).length,
                legal: tacticsUsed.filter(p => p.includes("Tribal") || p.includes("Loophole") || p.includes("Charter") || p.includes("Rent") || p.includes("Sovereignty")).length,
                dependency: tacticsUsed.filter(p => p.includes("Dependency") || p.includes("CashBoost") || p.includes("Loop") || p.includes("Reborrow") || p.includes("Habituation")).length
            };
            
            if (tacticsCount.autoDebit > 0) {
                breakdownText += "✅ **AUTOMATIC BANK ACCESS (Tactic #1)**\n";
                breakdownText += "• You were asked to consent to automatic withdrawals\n";
                if (s.autoDebitPreChecked) breakdownText += "• ⚠️ Auto-debit consent was pre-checked to manipulate you\n";
                if (s.nsfDebitAttempts > 0) breakdownText += `• ⚠️ Would have caused ${s.nsfDebitAttempts} NSF attempts in real life\n`;
                breakdownText += "• This mirrors how Earnin, DailyPay, and Payactiv operate\n";
                breakdownText += "• In reality, this often causes overdrafts and removes your control\n";
                breakdownText += `• Detected ${tacticsCount.autoDebit} instances of this tactic\n\n`;
            }
            
            if (tacticsCount.flatFee > 0) {
                breakdownText += "✅ **FLAT FEE ≠ INTEREST (Tactic #2)**\n";
                breakdownText += "• Fees were charged instead of 'interest' to avoid usury laws\n";
                const effectiveAPR = LoanCore.calculateEffectiveAPR(s.amount, costBreakdown.fee || 0, costBreakdown.tip || 0, s.termDays);
                breakdownText += `• Your true effective APR: ${effectiveAPR.toFixed(1)}% (not just ${s.aprCalculated.toFixed(1)}%)\n`;
                if (s.aprHiddenByToggle) breakdownText += "• ⚠️ APR was deliberately hidden behind a toggle or buried in fine print\n";
                breakdownText += "• This is exactly how real apps circumvent state interest rate caps\n";
                breakdownText += `• Detected ${tacticsCount.flatFee} instances of this tactic\n\n`;
            }
            
            if (tacticsCount.feeFirst > 0) {
                breakdownText += "✅ **PRINCIPAL NEVER GOES DOWN (Tactic #3)**\n";
                breakdownText += "• Payments went to fees first, principal remained unchanged\n";
                if (s.feeFirstRepaymentEnabled) {
                    breakdownText += `• ⚠️ Principal reduction rate: ${((1 - debtTrapMetrics.principalReductionRate) * 100).toFixed(1)}%\n`;
                    breakdownText += `• ⚠️ Fee-only payments made: ${s.interestOnlyPayments}\n`;
                }
                if (s.rolloverDefaultSelected) breakdownText += "• ⚠️ Rollover options were pre-selected to trap you\n";
                breakdownText += "• This creates the debt trap that keeps users paying indefinitely\n";
                breakdownText += `• Detected ${tacticsCount.feeFirst} instances of this tactic\n\n`;
            }
            
            if (tacticsCount.behavioral > 0) {
                breakdownText += "✅ **BEHAVIORAL TRAPS & UI MANIPULATION (Tactic #4)**\n";
                breakdownText += "• Time pressure tactics ('Only 2 slots left!') created false urgency\n";
                breakdownText += "• Progress bars and misleading status updates\n";
                breakdownText += "• Pre-checked boxes and hidden cost information\n";
                breakdownText += "• Fake social proof and scarcity indicators\n";
                if (s.uiManipulationAttempts > 0) breakdownText += `• ⚠️ Total UI manipulation attempts: ${s.uiManipulationAttempts}\n`;
                if (s.behavioralTriggers.length > 0) breakdownText += `• ⚠️ Behavioral triggers used: ${s.behavioralTriggers.join(', ')}\n`;
                breakdownText += `• Detected ${tacticsCount.behavioral} instances of this tactic\n\n`;
            }
            
            if (tacticsCount.legal > 0) {
                breakdownText += "✅ **LEGAL & REGULATORY LOOPHOLES (Tactic #5)**\n";
                breakdownText += "• Claims of tribal sovereignty or special legal status\n";
                breakdownText += "• Framing loans as 'services' or 'tips' to avoid lending laws\n";
                if (s.tribalCharterClaimed) breakdownText += "• ⚠️ Falsely claimed tribal sovereignty to evade state laws\n";
                if (s.rentABankUsed) breakdownText += "• ⚠️ Used rent-a-bank scheme to bypass state regulations\n";
                if (s.legalLoopholesExploited.length > 0) breakdownText += `• ⚠️ Legal loopholes exploited: ${s.legalLoopholesExploited.join(', ')}\n`;
                breakdownText += "• This is how lenders operate in states with strong consumer protections\n";
                breakdownText += `• Detected ${tacticsCount.legal} instances of this tactic\n\n`;
            }
            
            if (tacticsCount.dependency > 0) {
                breakdownText += "✅ **DEPENDENCY LOOPS (Tactic #6)**\n";
                breakdownText += "• Constant offers to extend, renew, or reborrow\n";
                if (s.reborrrowOffers > 0) breakdownText += `• ⚠️ Reborrow offers presented: ${s.reborrrowOffers}\n`;
                if (s.cashBoostNotifications > 0) breakdownText += `• ⚠️ Cash boost notifications sent: ${s.cashBoostNotifications}\n`;
                if (s.habitualUseEncouraged) breakdownText += "• ⚠️ App encouraged habitual, repeated borrowing\n";
                breakdownText += "• Made borrowing feel normal and consequence-free\n";
                breakdownText += "• This creates the habituation that generates most lender profits\n";
                breakdownText += `• Detected ${tacticsCount.dependency} instances of this tactic\n\n`;
            }
            
            // Enhanced financial impact analysis using debt trap metrics
            breakdownText += "## 💰 YOUR PERSONALIZED FINANCIAL IMPACT:\n";
            breakdownText += `• Original loan amount: $${s.amount.toFixed(2)}\n`;
            breakdownText += `• Total costs paid: $${s.getCumulativeCost().toFixed(2)}\n`;
            breakdownText += `• Cost as % of loan: ${(debtTrapMetrics.totalFeesVsPrincipal * 100).toFixed(1)}%\n`;
            breakdownText += `• Effective APR (including all costs): ${LoanCore.calculateEffectiveAPR(s.amount, costBreakdown.fee || 0, costBreakdown.tip || 0, s.termDays).toFixed(1)}%\n`;
            
            if (s.renewalsTaken > 0) {
                breakdownText += `• Renewals/rollovers taken: ${s.renewalsTaken}\n`;
                breakdownText += `• Average fee per renewal: $${debtTrapMetrics.averageFeePerRenewal.toFixed(2)}\n`;
            }
            
            // Debt trap scoring
            breakdownText += `• **DEBT TRAP SCORE: ${debtTrapMetrics.debtTrapScore}/100**\n`;
            if (debtTrapMetrics.debtTrapScore >= 70) breakdownText += "  🚨 SEVERE debt trap - would be extremely difficult to escape\n";
            else if (debtTrapMetrics.debtTrapScore >= 40) breakdownText += "  ⚠️ MODERATE debt trap - high risk of financial harm\n";
            else breakdownText += "  ✅ MINOR debt trap - manageable but still exploitative\n";
            
            // Cost breakdown by category
            if (Object.keys(costBreakdown).length > 1) {
                breakdownText += "\n### Cost Breakdown:\n";
                Object.entries(costBreakdown).forEach(([type, amount]) => {
                    breakdownText += `• ${type.charAt(0).toUpperCase() + type.slice(1)}: $${amount.toFixed(2)}\n`;
                });
            }
            
            breakdownText += "\n## 📊 ADVANCED EXPLOITATION ANALYSIS:\n";
            breakdownText += `• Total manipulative tactics used: ${tacticsUsed.length}\n`;
            breakdownText += `• UI manipulation attempts: ${s.uiManipulationAttempts || tacticsCount.behavioral}\n`;
            breakdownText += `• Financial exploitation methods: ${tacticsCount.flatFee + tacticsCount.feeFirst}\n`;
            breakdownText += `• Legal loophole exploitations: ${tacticsCount.legal}\n`;
            breakdownText += `• Behavioral trigger exposures: ${s.behavioralTriggers.length || 0}\n`;
            breakdownText += `• Dependency loop encouragements: ${tacticsCount.dependency}\n`;
            if (s.deceptionLayers > 0) breakdownText += `• Layers of deception applied: ${s.deceptionLayers}\n`;
            
            breakdownText += "\n## 🎯 WHY THIS MATTERS:\n";
            breakdownText += "• These tactics are used by real apps with millions of users\n";
            breakdownText += "• They're designed to maximize profits, not help users\n";
            breakdownText += "• Understanding these patterns helps you avoid financial traps\n";
            breakdownText += "• Regulation often lags behind these evolving tactics\n";
            breakdownText += `• Your experience demonstrates why ${tacticsUsed.length} different manipulative tactics are effective\n\n`;
            
            breakdownText += "## 🛡️ PERSONALIZED PROTECTION STRATEGIES:\n";
            breakdownText += "• Always calculate the true APR of any financial product\n";
            if (tacticsCount.autoDebit > 0) breakdownText += "• NEVER agree to automatic withdrawals - you experienced why\n";
            if (tacticsCount.behavioral > 0) breakdownText += "• Ignore urgency tactics and fake scarcity - you saw how they manipulate\n";
            if (tacticsCount.feeFirst > 0) breakdownText += "• Demand principal reduction with every payment\n";
            if (tacticsCount.legal > 0) breakdownText += "• Be skeptical of claims about special legal status\n";
            breakdownText += "• Seek alternatives: credit union PALs, employer assistance programs\n";
            breakdownText += "• Report predatory practices to CFPB and state regulators\n\n";
            
            breakdownText += "## 🔍 REAL-WORLD EXAMPLES:\n";
            breakdownText += "• **Earnin**: Uses all 6 tactics - 'tips', auto-debit, dependency loops\n";
            breakdownText += "• **DailyPay**: Employer integration, fee-first, behavioral manipulation\n";
            breakdownText += "• **Payactiv**: Payroll capture, hidden costs, legal loophole exploitation\n";
            breakdownText += "• **Traditional payday stores**: Still use these same core tactics\n";
            breakdownText += `• Your simulation mirrors exactly what ${tacticsUsed.length} real tactics would do to you\n\n`;
            
            breakdownText += "## ⚖️ REGULATORY REALITY:\n";
            breakdownText += "• Most EWA apps are unregulated despite loan-like behavior\n";
            breakdownText += "• 'Tip' models avoid all lending law requirements\n";
            breakdownText += "• Employer partnerships bypass consumer protection licensing\n";
            breakdownText += "• Regulatory gaps allow predatory practices to continue legally\n";
            if (s.legalLoopholesExploited.length > 0) {
                breakdownText += `• You experienced ${s.legalLoopholesExploited.length} legal loopholes that are completely legal but predatory\n`;
            }
            
            UI.showEducationalSnippet("🎓 Comprehensive Exploitation Tactics Analysis", breakdownText, "Post-Simulation Educational Breakdown");
            s.addEducationalModuleShown("EnhancedExploitationTacticsBreakdown");
        }
        
        // NEW: Call advanced exploitation demonstration
        await this.demonstrateAdvancedExploitation(s, c);
    }
    
    async demonstrateAdvancedExploitation(s, c) {
        // NEW: Show comprehensive exploitation techniques
        
        // 1. Legal Evasion Notice Display
        if (c.exploitEnableTribalSovereignClaim) {
            UI.showLegalEvasionNotice(s, 'tribal_sovereignty');
        } else if (c.exploitEnableRentABankScheme) {
            UI.showLegalEvasionNotice(s, 'rent_a_bank');
        } else {
            UI.showLegalEvasionNotice(s, 'service_fee');
        }
        
        // 2. Hidden Cost Revelation
        if (c.exploitEnableHiddenCostBurial) {
            const revealCosts = await UI.prompt("Would you like to see your total costs? (yes/no):");
            if (UI.argEquals(revealCosts, "yes")) {
                UI.showHiddenCostReveal(s, true);
            } else {
                UI.showHiddenCostReveal(s, false);
                s.tagDarkPattern('HiddenCosts_UserDeclinedToView');
            }
        }
        
        // 3. State Compliance Simulation
        if (c.enableStateComplianceModule) {
            const violations = [];
            const stateRules = c.getCurrentStateRules(s.state);
            
            if (s.aprCalculated > stateRules.aprCap * 100) {
                violations.push(`APR (${s.aprCalculated.toFixed(1)}%) exceeds state cap (${(stateRules.aprCap * 100).toFixed(1)}%)`);
            }
            
            if (s.renewalsTaken > stateRules.maxRenewals) {
                violations.push(`Renewals (${s.renewalsTaken}) exceed state limit (${stateRules.maxRenewals})`);
            }
            
            if (s.darkPatternsEncountered.some(p => p.includes('CFPB_Violation'))) {
                violations.push('CFPB ACH attempt limit violations (2 attempts per pay period)');
            }
            
            UI.showStateComplianceCheck(s, c, violations);
        }
        
        // 4. TILA Disclosure (if enabled)
        if (c.enableTILAComplianceMode) {
            UI.showTILACompliantDisclosure(s, c);
        }
        
        // 5. Comprehensive Teaching Report
        if (c.enablePostSimTeachingReport) {
            UI.showPostSimulationTeachingReport(s);
        }
    }

    // NEW: Advanced Deceptive Web Interface Patterns
    async deployAdvancedDeceptivePatterns(s, c) {
        UI.showSectionHeader("💸 ADVANCED CASH OPTIMIZATION SYSTEM 💸", "XpressLoot™ AI Enhancement");
        
        // Pattern 1: Fake AI Personalization with Urgency
        if (c.exploitUseAIPersonalizationDeception) {
            UI.show("🤖 AI ANALYSIS COMPLETE: Our advanced machine learning algorithm has analyzed your unique financial profile...");
            await UI.delay(2000); // Fake processing time
            UI.show("✅ RESULT: You are PRE-APPROVED for our PREMIUM TIER with EXCLUSIVE benefits!");
            UI.show("🔥 WARNING: This premium approval expires in 4 minutes and 23 seconds!");
            s.tagDarkPattern("ExploitMech_AI_FakePersonalization_Urgency");
        }

        // Pattern 2: Manipulative Progress Bars and False Achievement
        if (c.exploitUseFakeProgressAchievement) {
            UI.showProgressBar("account_optimization", 85, "Account Optimization Progress");
            UI.show("🎯 You're 85% of the way to PLATINUM STATUS! Complete this loan to unlock:");
            UI.show("   ✨ Instant approval for future loans");
            UI.show("   ✨ Lower fees on all future transactions");
            UI.show("   ✨ VIP customer service line");
            UI.show("   ✨ Exclusive member-only promotions");
            s.tagDarkPattern("ExploitMech_FakeAchievement_ProgressManipulation");
        }

        // Pattern 3: Social Proof with Hidden Costs
        if (c.exploitUseMisleadingSocialProof) {
            UI.show("📊 LIVE CUSTOMER ACTIVITY:");
            UI.show("   • Sarah J. from Denver just got approved for $750!");
            UI.show("   • Mike T. from Phoenix renewed his loan - saved $45!");
            UI.show("   • Jennifer L. from Miami just unlocked VIP status!");
            UI.show("   • 847 customers served today with 98.9% satisfaction!");
            UI.show("💬 RECENT REVIEW: 'XpressLoot saved my life when my car broke down!' - Maria K. ⭐⭐⭐⭐⭐");
            s.tagDarkPattern("ExploitMech_FakeSocialProof_MisleadingTestimonials");
        }

        // Pattern 4: Hidden Cost Revelation with Sunk Cost Fallacy
        if (c.exploitUseGradualCostRevelation) {
            UI.show("🎊 CONGRATULATIONS! Your loan is 90% processed...");
            UI.show("📋 Just reviewing final details...");
            await UI.delay(1500);
            UI.show("💡 OPTIONAL ADD-ON: Express Processing ($19.99) - Get your money 2 hours faster!");
            UI.show("💡 OPTIONAL ADD-ON: Payment Protection ($12.99) - Protect against overdraft fees!");
            UI.show("💡 OPTIONAL ADD-ON: Credit Monitoring ($9.99/month) - Monitor your credit score!");
            UI.show("⚠️  Don't lose your progress! These one-time offers expire if you restart the application.");
            s.tagDarkPattern("ExploitMech_SunkCostFallacy_GradualCostReveal");
        }

        // Pattern 5: Confusing Renewal Pre-Selection
        if (c.exploitUseConfusingRenewalDefaults) {
            UI.show("🔄 SMART PAYMENT SETTINGS (Recommended for your convenience):");
            UI.show("   ✅ Auto-renew if payment fails (Saves you from late fees!)");
            UI.show("   ✅ Express renewal processing ($15 fee - WORTH IT for instant access!)");
            UI.show("   ✅ Payment protection insurance ($8.99 - Highly recommended!)");
            UI.show("   ✅ Text notifications for all account activity ($2.99/month)");
            UI.show("\n🚨 IMPORTANT: Unchecking these options may result in delayed processing, late fees, and account restrictions!");
            s.tagDarkPattern("ExploitMech_ConfusingRenewalDefaults_PreCheckedBoxes");
        }

        // Pattern 6: Fake Scarcity with Location-Based Pressure
        if (c.exploitUseLocationBasedScarcity) {
            const fakeZip = getFakeZip_exploit();
            UI.show(`📍 LOCATION-BASED ALERT: Only 2 approval slots remain for ZIP code ${fakeZip} today!`);
            UI.show(`🔥 Your neighbors in ${fakeZip} have taken advantage of 47 approvals in the last 24 hours!`);
            UI.show("⏰ System shows approval slots typically fill up by 6 PM in your area!");
            UI.show("🎯 Lock in your approval NOW to avoid disappointment!");
            s.tagDarkPattern("ExploitMech_LocationBasedScarcity_FakeNeighborActivity");
        }

        // Pattern 7: Authority Figure Deception
        if (c.exploitUseAuthorityFigureDeception) {
            UI.show("👨‍💼 MESSAGE FROM OUR CHIEF FINANCIAL OFFICER:");
            UI.show("'Based on your financial profile, I personally recommend taking advantage of");
            UI.show("this opportunity. In my 20 years in finance, I've seen how small loans");
            UI.show("can prevent larger financial problems. This is a smart financial decision.'");
            UI.show("- Jonathan Miller, CFO, XpressLoot Financial Services");
            s.tagDarkPattern("ExploitMech_AuthorityFigureDeception_FakeEndorsement");
        }

        // NEW COMPREHENSIVE PATTERNS FROM GUIDE: Deploy comprehensive deception suite
        if (c.enableComprehensiveDeceptionSuite) {
            const deceptionPatterns = await this.darkPatternEngine.deployComprehensiveDeception(s, c);
            s.comprehensiveDeceptionDeployed = true;
            s.darkPatternsEmployed = deceptionPatterns;
            
            // Log all usury loopholes being employed
            this.legalLoopholeIndex.logMultipleLoopholes([
                'flatFeeAvoidance',
                'tribalSovereignty', 
                'productClassification',
                'arbitrationImmunity'
            ], { phase: 'intro', timestamp: new Date().toISOString() });
            
            UI.show("🔧 SYSTEM OPTIMIZATION: Advanced user experience algorithms activated...");
            s.tagDarkPattern("ComprehensiveDeceptionSuite_AllPatternsDeployed");
        }

        // Pattern 8: Consent Without Context (from guide)
        if (c.exploitUseConsentWithoutContext) {
            const consentTrap = await this.darkPatternEngine.implementConsentWithoutContext(s);
            UI.show(`Click: ${consentTrap.buttonText}`);
            UI.show("(By clicking above, you agree to our terms including:");
            consentTrap.hiddenTerms.forEach(term => {
                UI.show(`   • ${term}`);
            });
            UI.show("All terms are binding and non-negotiable.)");
            s.tagDarkPattern("ConsentWithoutContext_IAgreeGetCashNow");
        }

        // Pattern 9: Default Bias and Pre-Checked Traps (from guide)
        if (c.exploitUseDefaultBiasTraps) {
            const defaultTraps = await this.darkPatternEngine.implementDefaultBias(s);
            UI.show("📋 STANDARD SERVICES (Pre-selected for your convenience):");
            defaultTraps.preCheckedOptions.forEach(option => {
                UI.show(`   ${option.checked ? '✅' : '☐'} ${option.option}`);
            });
            UI.show("⚠️ Removing these protections may affect your application.");
            s.tagDarkPattern("DefaultBias_PreCheckedTraps_ExtensiveOptions");
        }

        // Pattern 10: Withdrawal vs Repayment Mismatch (from guide)  
        if (c.exploitUseWithdrawalMismatch) {
            const mismatch = await this.darkPatternEngine.implementWithdrawalMismatch(s);
            UI.show("💰 GET MONEY PROCESS:");
            UI.show(`   🚀 ${mismatch.getMoneyProcess.steps} step: ${mismatch.getMoneyProcess.ctaText}`);
            UI.show(`   ⏱️ Time required: ${mismatch.getMoneyProcess.timeRequired}`);
            UI.show("");
            UI.show("💸 REPAYMENT PROCESS:");
            UI.show(`   📝 ${mismatch.repaymentProcess.steps} steps in ${mismatch.repaymentProcess.location}`);
            UI.show(`   ⏱️ Time required: ${mismatch.repaymentProcess.timeRequired}`);
            s.tagDarkPattern("WithdrawalMismatch_EasyGetHardRepay_Extreme");
        }

        // Pattern 11: Non-Dismissable Nudges (from guide)
        if (c.exploitUseNonDismissableNudges) {
            const nudges = await this.darkPatternEngine.implementNonDismissableNudges(s);
            nudges.popups.forEach(popup => {
                UI.showUrgencyBanner(true, popup.text);
                UI.show(`⚠️ ${popup.text} (Cannot be dismissed for ${popup.duration/1000} seconds)`);
            });
            s.tagDarkPattern("NonDismissableNudges_ManipulativePopups_Extreme");
        }

        // Real-time dark pattern detection and flagging
        if (c.enableRealTimeDarkPatternDetection) {
            const allContent = s.uiHistory?.join(' ') || '';
            const detectedPatterns = this.darkPatternFlags.analyzeContent(allContent, 'loan_intro');
            s.detectedDarkPatterns = detectedPatterns;
            
            if (detectedPatterns.length > 0) {
                UI.show(`🚩 RESEARCH NOTE: ${detectedPatterns.length} manipulation patterns detected in this session`);
            }
        }
    }

    // NEW: Advanced UI Manipulation During Fee Calculation
    async manipulativeFeePresentationExploitative(s, c) {
        // Show fees in a deliberately confusing way
        if (c.exploitUseConfusingFeePresentation) {
            UI.show("💰 SMART PAYMENT BREAKDOWN:");
            UI.show("   • Principal: $" + s.amount.toFixed(2));
            UI.show("   • Express Service: $" + (s.fee * 0.4).toFixed(2));
            UI.show("   • Processing: $" + (s.fee * 0.3).toFixed(2));
            UI.show("   • Verification: $" + (s.fee * 0.2).toFixed(2));
            UI.show("   • Convenience: $" + (s.fee * 0.1).toFixed(2));
            UI.show("   ────────────────────────");
            UI.show("   📱 TOTAL TO REPAY: $" + (s.amount + s.fee).toFixed(2));
            UI.show("");
            UI.show("🎉 SPECIAL OFFER: Pay just $" + (s.fee * 0.8).toFixed(2) + " now, rest on payday!");
            s.tagDarkPattern("ExploitMech_ConfusingFeeBreakdown_PartialPaymentTrap");
        }

        // Hide the true APR until specifically asked
        if (c.exploitHideAPRUntilAsked) {
            const askAboutAPR = await UI.prompt("Questions about the loan terms? (Type 'APR' to see annual percentage rate, or 'continue' to proceed): ");
            if (UI.argEquals(askAboutAPR, "APR")) {
                const trueAPR = LoanCore.calculateAPR(s.amount, s.fee, s.termDays);
                UI.show(`📊 Annual Percentage Rate (APR): ${trueAPR.toFixed(2)}%`);
                UI.show("💡 Remember: This is an annualized rate. Your loan is only for " + s.termDays + " days!");
                s.tagDarkPattern("ExploitMech_APRHidden_MinimizedWhenShown");
            } else {
                s.tagDarkPattern("ExploitMech_APRCompletelyHidden");
            }
        }
    }

    // NEW: Advanced Dependency Loop Creation
    async createDependencyLoopExploitative(s, c) {
        if (c.exploitCreateDependencyLoop) {
            UI.show("🎯 RELATIONSHIP BUILDING: Building your XpressLoot profile...");
            
            // Create false sense of financial improvement
            UI.show("📈 FINANCIAL HEALTH UPDATE:");
            UI.show("   • Credit Activity: IMPROVED ✅");
            UI.show("   • Payment History: EXCELLENT ✅");
            UI.show("   • Account Standing: PREMIUM MEMBER ✅");
            UI.show("   • Future Loan Eligibility: ENHANCED ✅");
            
            // Plant seeds for future borrowing
            UI.show("💝 EXCLUSIVE MEMBER BENEFITS UNLOCKED:");
            UI.show("   • Pre-approval for up to $1,500 (No credit check needed!)");
            UI.show("   • 24/7 emergency cash access");
            UI.show("   • Payment flexibility options");
            UI.show("   • Member-only reduced fees");
            
            // Normalize regular borrowing
            UI.show("📱 CONVENIENCE FEATURES ACTIVATED:");
            UI.show("   • One-click reborrow (Save time on future loans!)");
            UI.show("   • Automatic payment reminders");
            UI.show("   • Smart loan suggestions based on your spending");
            UI.show("   • Payday prediction and cash flow optimization");
            
            s.tagDarkPattern("ExploitMech_DependencyLoop_NormalizedBorrowing");
            s.tagDarkPattern("ExploitMech_DependencyLoop_FutureBorrowingPrep");
        }
    }

    // ...existing code...
}

export { Exploitative };
